local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local StarterGui = game:GetService("StarterGui")
local HttpService = game:GetService("HttpService")

local Player = Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui")
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local RootPart = Character:WaitForChild("HumanoidRootPart")

-- =========================
-- CONFIGURATION & SETTINGS
-- =========================
local Config = {
	ToggleKey = Enum.KeyCode.Insert,
	Colors = {
		Primary = Color3.fromRGB(25, 25, 35),
		Secondary = Color3.fromRGB(45, 45, 65),
		Accent = Color3.fromRGB(100, 150, 255),
		Text = Color3.fromRGB(255, 255, 255),
		Success = Color3.fromRGB(50, 200, 50),
		Warning = Color3.fromRGB(255, 200, 50)
	},
	Features = {
		Fly = {enabled = false, speed = 16, hotkey = Enum.KeyCode.F},
		Speed = {value = 16},
		JumpPower = {value = 50},
		Noclip = {enabled = false},
		Invisible = {enabled = false},
		ESP = {enabled = false, transparency = 0.5, color = Color3.fromRGB(255, 255, 255)},
		Nametags = {enabled = false, size = 14, color = Color3.fromRGB(255, 255, 255)}
	}
}

-- =========================
-- UTILITY FUNCTIONS
-- =========================
local Utils = {}

function Utils.CreateTween(object, info, properties)
	local tween = TweenService:Create(object, info, properties)
	tween:Play()
	return tween
end

function Utils.CreateRoundFrame(parent, properties)
	local frame = Instance.new("Frame")
	frame.BackgroundColor3 = properties.BackgroundColor3 or Config.Colors.Primary
	frame.BorderSizePixel = 0
	frame.Size = properties.Size or UDim2.new(0, 100, 0, 100)
	frame.Position = properties.Position or UDim2.new(0, 0, 0, 0)
	frame.Parent = parent

	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, properties.CornerRadius or 8)
	corner.Parent = frame

	if properties.Shadow then
		local shadow = Instance.new("Frame")
		shadow.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		shadow.BackgroundTransparency = 0.8
		shadow.BorderSizePixel = 0
		shadow.Size = UDim2.new(1, 4, 1, 4)
		shadow.Position = UDim2.new(0, -2, 0, -2)
		shadow.ZIndex = frame.ZIndex - 1
		shadow.Parent = frame.Parent

		local shadowCorner = Instance.new("UICorner")
		shadowCorner.CornerRadius = corner.CornerRadius
		shadowCorner.Parent = shadow
	end

	return frame
end

function Utils.CreateButton(parent, properties)
	local button = Instance.new("TextButton")
	button.Size = properties.Size or UDim2.new(0, 100, 0, 30)
	button.Position = properties.Position or UDim2.new(0, 0, 0, 0)
	button.BackgroundColor3 = properties.BackgroundColor3 or Config.Colors.Secondary
	button.BorderSizePixel = 0
	button.Text = properties.Text or ""
	button.TextColor3 = Config.Colors.Text
	button.TextScaled = true
	button.Font = Enum.Font.GothamBold
	button.Parent = parent

	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, 6)
	corner.Parent = button

	-- Hover effects
	button.MouseEnter:Connect(function()
		Utils.CreateTween(button, TweenInfo.new(0.2), {BackgroundColor3 = Config.Colors.Accent})
	end)

	button.MouseLeave:Connect(function()
		Utils.CreateTween(button, TweenInfo.new(0.2), {BackgroundColor3 = properties.BackgroundColor3 or Config.Colors.Secondary})
	end)

	return button
end

function Utils.CreateSlider(parent, properties)
	local sliderFrame = Utils.CreateRoundFrame(parent, {
		Size = UDim2.new(0, 200, 0, 25),
		Position = properties.Position,
		BackgroundColor3 = Config.Colors.Secondary,
		CornerRadius = 12
	})

	local sliderButton = Utils.CreateRoundFrame(sliderFrame, {
		Size = UDim2.new(0, 20, 0, 20),
		Position = UDim2.new(0, 2.5, 0, 2.5),
		BackgroundColor3 = Config.Colors.Accent,
		CornerRadius = 10
	})

	local dragging = false
	local minVal = properties.Min or 0
	local maxVal = properties.Max or 100
	local currentVal = properties.Value or minVal

	local function updateSlider(value)
		currentVal = math.clamp(value, minVal, maxVal)
		local percentage = (currentVal - minVal) / (maxVal - minVal)
		local newPos = UDim2.new(percentage, -10, 0, 2.5)
		Utils.CreateTween(sliderButton, TweenInfo.new(0.1), {Position = newPos})

		if properties.Callback then
			properties.Callback(currentVal)
		end
	end

	sliderButton.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
		end
	end)

	UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = false
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
			local mouseX = input.Position.X
			local frameX = sliderFrame.AbsolutePosition.X
			local frameWidth = sliderFrame.AbsoluteSize.X
			local percentage = math.clamp((mouseX - frameX) / frameWidth, 0, 1)
			local newValue = minVal + (maxVal - minVal) * percentage
			updateSlider(newValue)
		end
	end)

	updateSlider(currentVal)
	return sliderFrame, updateSlider
end

-- =========================
-- FEATURE IMPLEMENTATIONS
-- =========================
local Features = {}

-- Fly System
Features.Fly = {}
local flyConnection = nil
local flyBodyVelocity = nil

function Features.Fly.Enable()
	if flyBodyVelocity then return end

	flyBodyVelocity = Instance.new("BodyVelocity")
	flyBodyVelocity.MaxForce = Vector3.new(4000, 4000, 4000)
	flyBodyVelocity.Velocity = Vector3.new(0, 0, 0)
	flyBodyVelocity.Parent = RootPart

	flyConnection = RunService.Heartbeat:Connect(function()
		local camera = Workspace.CurrentCamera
		local moveVector = Humanoid.MoveDirection
		local lookDirection = camera.CFrame.LookVector
		local rightDirection = camera.CFrame.RightVector

		local velocity = Vector3.new(0, 0, 0)

		if UserInputService:IsKeyDown(Enum.KeyCode.W) then
			velocity = velocity + lookDirection
		end
		if UserInputService:IsKeyDown(Enum.KeyCode.S) then
			velocity = velocity - lookDirection
		end
		if UserInputService:IsKeyDown(Enum.KeyCode.A) then
			velocity = velocity - rightDirection
		end
		if UserInputService:IsKeyDown(Enum.KeyCode.D) then
			velocity = velocity + rightDirection
		end
		if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
			velocity = velocity + Vector3.new(0, 1, 0)
		end
		if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
			velocity = velocity + Vector3.new(0, -1, 0)
		end

		flyBodyVelocity.Velocity = velocity * Config.Features.Fly.speed
	end)
end

function Features.Fly.Disable()
	if flyBodyVelocity then
		flyBodyVelocity:Destroy()
		flyBodyVelocity = nil
	end
	if flyConnection then
		flyConnection:Disconnect()
		flyConnection = nil
	end
end

function Features.Fly.Toggle()
	Config.Features.Fly.enabled = not Config.Features.Fly.enabled
	if Config.Features.Fly.enabled then
		Features.Fly.Enable()
	else
		Features.Fly.Disable()
	end
end

-- Noclip System
Features.Noclip = {}
local noclipConnection = nil

function Features.Noclip.Enable()
	if noclipConnection then return end

	noclipConnection = RunService.Stepped:Connect(function()
		if Character then
			for _, part in pairs(Character:GetDescendants()) do
				if part:IsA("BasePart") and part.CanCollide then
					part.CanCollide = false
				end
			end
		end
	end)
end

function Features.Noclip.Disable()
	if noclipConnection then
		noclipConnection:Disconnect()
		noclipConnection = nil
	end

	if Character then
		for _, part in pairs(Character:GetDescendants()) do
			if part:IsA("BasePart") then
				part.CanCollide = true
			end
		end
	end
end

function Features.Noclip.Toggle()
	Config.Features.Noclip.enabled = not Config.Features.Noclip.enabled
	if Config.Features.Noclip.enabled then
		Features.Noclip.Enable()
	else
		Features.Noclip.Disable()
	end
end

-- Invisibility System
Features.Invisible = {}

function Features.Invisible.Toggle()
	Config.Features.Invisible.enabled = not Config.Features.Invisible.enabled

	if Character then
		for _, part in pairs(Character:GetDescendants()) do
			if part:IsA("BasePart") or part:IsA("Decal") then
				if Config.Features.Invisible.enabled then
					part.Transparency = 1
				else
					if part.Name == "HumanoidRootPart" then
						part.Transparency = 1
					else
						part.Transparency = 0
					end
				end
			elseif part:IsA("Accessory") then
				local handle = part:FindFirstChild("Handle")
				if handle then
					if Config.Features.Invisible.enabled then
						handle.Transparency = 1
					else
						handle.Transparency = 0
					end
				end
			end
		end
	end
end

-- ESP System
Features.ESP = {}
local espHighlights = {}

function Features.ESP.CreateHighlight(player)
	if player == Player or not player.Character then return end

	local highlight = Instance.new("Highlight")
	highlight.FillColor = Config.Features.ESP.color
	highlight.OutlineColor = Config.Features.ESP.color
	highlight.FillTransparency = Config.Features.ESP.transparency
	highlight.OutlineTransparency = 0
	highlight.Parent = player.Character

	espHighlights[player] = highlight
end

function Features.ESP.RemoveHighlight(player)
	if espHighlights[player] then
		espHighlights[player]:Destroy()
		espHighlights[player] = nil
	end
end

function Features.ESP.Enable()
	for _, player in pairs(Players:GetPlayers()) do
		Features.ESP.CreateHighlight(player)
	end

	Players.PlayerAdded:Connect(function(player)
		if Config.Features.ESP.enabled then
			player.CharacterAdded:Connect(function()
				wait(1)
				Features.ESP.CreateHighlight(player)
			end)
		end
	end)

	Players.PlayerRemoving:Connect(function(player)
		Features.ESP.RemoveHighlight(player)
	end)
end

function Features.ESP.Disable()
	for player, highlight in pairs(espHighlights) do
		highlight:Destroy()
	end
	espHighlights = {}
end

function Features.ESP.Toggle()
	Config.Features.ESP.enabled = not Config.Features.ESP.enabled
	if Config.Features.ESP.enabled then
		Features.ESP.Enable()
	else
		Features.ESP.Disable()
	end
end

-- Nametags System
Features.Nametags = {}
local nametagsGuis = {}

function Features.Nametags.CreateNametag(player)
	if player == Player or not player.Character then return end

	local character = player.Character
	local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
	if not humanoidRootPart then return end

	local billboardGui = Instance.new("BillboardGui")
	billboardGui.Size = UDim2.new(0, 200, 0, 50)
	billboardGui.StudsOffset = Vector3.new(0, -3, 0)
	billboardGui.Parent = humanoidRootPart

	local textLabel = Instance.new("TextLabel")
	textLabel.Size = UDim2.new(1, 0, 1, 0)
	textLabel.BackgroundTransparency = 1
	textLabel.Text = player.Name
	textLabel.TextColor3 = Config.Features.Nametags.color
	textLabel.TextStrokeTransparency = 0
	textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
	textLabel.TextScaled = true
	textLabel.Font = Enum.Font.GothamBold
	textLabel.Parent = billboardGui

	nametagsGuis[player] = billboardGui
end

function Features.Nametags.RemoveNametag(player)
	if nametagsGuis[player] then
		nametagsGuis[player]:Destroy()
		nametagsGuis[player] = nil
	end
end

function Features.Nametags.Enable()
	for _, player in pairs(Players:GetPlayers()) do
		Features.Nametags.CreateNametag(player)
	end

	Players.PlayerAdded:Connect(function(player)
		if Config.Features.Nametags.enabled then
			player.CharacterAdded:Connect(function()
				wait(1)
				Features.Nametags.CreateNametag(player)
			end)
		end
	end)

	Players.PlayerRemoving:Connect(function(player)
		Features.Nametags.RemoveNametag(player)
	end)
end

function Features.Nametags.Disable()
	for player, gui in pairs(nametagsGuis) do
		gui:Destroy()
	end
	nametagsGuis = {}
end

function Features.Nametags.Toggle()
	Config.Features.Nametags.enabled = not Config.Features.Nametags.enabled
	if Config.Features.Nametags.enabled then
		Features.Nametags.Enable()
	else
		Features.Nametags.Disable()
	end
end

-- Give All Items
Features.GiveAllItems = {}

function Features.GiveAllItems.Execute()
	local itemsGiven = 0
	local containers = {ReplicatedStorage, Workspace}

	-- Try to access ServerStorage (may not work in all games)
	pcall(function()
		if game:GetService("ServerStorage") then
			table.insert(containers, game:GetService("ServerStorage"))
		end
	end)

	local function searchContainer(container)
		for _, item in pairs(container:GetDescendants()) do
			if item:IsA("Tool") and item.Parent ~= Player.Backpack and item.Parent ~= Character then
				pcall(function()
					local clonedTool = item:Clone()
					clonedTool.Parent = Player.Backpack
					itemsGiven = itemsGiven + 1
				end)
			end
		end
	end

	for _, container in pairs(containers) do
		searchContainer(container)
	end

	StarterGui:SetCore("SendNotification", {
		Title = "Items Given";
		Text = "Gave " .. itemsGiven .. " items";
		Duration = 3;
	})
end

-- =========================
-- GUI CREATION
-- =========================
local GUI = {}

-- Create main ScreenGui
GUI.ScreenGui = Instance.new("ScreenGui")
GUI.ScreenGui.Name = "VyrxisMenu"
GUI.ScreenGui.ResetOnSpawn = false
GUI.ScreenGui.Parent = PlayerGui

-- Loading Screen
function GUI.CreateLoadingScreen()
	local loadingFrame = Utils.CreateRoundFrame(GUI.ScreenGui, {
		Size = UDim2.new(0, 300, 0, 150),
		Position = UDim2.new(0.5, -150, 0.5, -75),
		BackgroundColor3 = Config.Colors.Primary,
		CornerRadius = 15,
		Shadow = true
	})

	local loadingText = Instance.new("TextLabel")
	loadingText.Size = UDim2.new(1, -40, 0, 50)
	loadingText.Position = UDim2.new(0, 20, 0, 50)
	loadingText.BackgroundTransparency = 1
	loadingText.Text = "Starting"
	loadingText.TextColor3 = Config.Colors.Text
	loadingText.TextScaled = true
	loadingText.Font = Enum.Font.GothamBold
	loadingText.Parent = loadingFrame

	-- Animate loading text
	local dots = 0
	local dotConnection
	dotConnection = RunService.Heartbeat:Connect(function()
		dots = (dots + 1) % 4
		loadingText.Text = "Starting" .. string.rep(".", dots)
	end)

	-- Remove loading screen after 3 seconds
	wait(3)
	dotConnection:Disconnect()
	Utils.CreateTween(loadingFrame, TweenInfo.new(0.5), {Size = UDim2.new(0, 0, 0, 0)})
	wait(0.5)
	loadingFrame:Destroy()

	GUI.CreateMainInterface()
end

-- Header Bar
function GUI.CreateHeaderBar()
	GUI.HeaderBar = Utils.CreateRoundFrame(GUI.ScreenGui, {
		Size = UDim2.new(0, 600, 0, 40),
		Position = UDim2.new(0.5, -300, 0.3, -20),
		BackgroundColor3 = Config.Colors.Primary,
		CornerRadius = 8,
		Shadow = true
	})

	-- Title
	local title = Instance.new("TextLabel")
	title.Size = UDim2.new(0, 200, 1, 0)
	title.Position = UDim2.new(0, 10, 0, 0)
	title.BackgroundTransparency = 1
	title.Text = "Vyrxis Menu"
	title.TextColor3 = Config.Colors.Text
	title.TextXAlignment = Enum.TextXAlignment.Left
	title.TextScaled = true
	title.Font = Enum.Font.GothamBold
	title.Parent = GUI.HeaderBar

	-- Minimize Button
	local minimizeBtn = Utils.CreateButton(GUI.HeaderBar, {
		Size = UDim2.new(0, 30, 0, 30),
		Position = UDim2.new(1, -70, 0, 5),
		Text = "➖",
		BackgroundColor3 = Config.Colors.Secondary
	})

	minimizeBtn.MouseButton1Click:Connect(function()
		GUI.ToggleMainFrame()
	end)

	-- Settings Button
	local settingsBtn = Utils.CreateButton(GUI.HeaderBar, {
		Size = UDim2.new(0, 30, 0, 30),
		Position = UDim2.new(1, -35, 0, 5),
		Text = "⚙️",
		BackgroundColor3 = Config.Colors.Secondary
	})

	settingsBtn.MouseButton1Click:Connect(function()
		GUI.ToggleSettingsFrame()
	end)

	-- Make draggable
	local dragging = false
	local dragStart = nil
	local startPos = nil

	GUI.HeaderBar.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = GUI.HeaderBar.Position
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
			local delta = input.Position - dragStart
			local newPos = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
			GUI.HeaderBar.Position = newPos
			if GUI.MainFrame then
				GUI.MainFrame.Position = UDim2.new(newPos.X.Scale, newPos.X.Offset, newPos.Y.Scale, newPos.Y.Offset + 45)
			end
		end
	end)

	UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = false
		end
	end)
end

-- Main Interface
function GUI.CreateMainInterface()
	GUI.CreateHeaderBar()

	GUI.MainFrame = Utils.CreateRoundFrame(GUI.ScreenGui, {
		Size = UDim2.new(0, 600, 0, 400),
		Position = UDim2.new(0.5, -300, 0.3, 25),
		BackgroundColor3 = Config.Colors.Primary,
		CornerRadius = 8,
		Shadow = true
	})

	-- Left sidebar (Categories)
	GUI.CategoryFrame = Utils.CreateRoundFrame(GUI.MainFrame, {
		Size = UDim2.new(0, 180, 1, -20),
		Position = UDim2.new(0, 10, 0, 10),
		BackgroundColor3 = Config.Colors.Secondary,
		CornerRadius = 6
	})

	local categoryTitle = Instance.new("TextLabel")
	categoryTitle.Size = UDim2.new(1, -20, 0, 30)
	categoryTitle.Position = UDim2.new(0, 10, 0, 10)
	categoryTitle.BackgroundTransparency = 1
	categoryTitle.Text = "Liste"
	categoryTitle.TextColor3 = Config.Colors.Text
	categoryTitle.TextXAlignment = Enum.TextXAlignment.Left
	categoryTitle.TextScaled = true
	categoryTitle.Font = Enum.Font.GothamBold
	categoryTitle.Parent = GUI.CategoryFrame

	local categoryScroll = Instance.new("ScrollingFrame")
	categoryScroll.Size = UDim2.new(1, -20, 1, -50)
	categoryScroll.Position = UDim2.new(0, 10, 0, 40)
	categoryScroll.BackgroundTransparency = 1
	categoryScroll.BorderSizePixel = 0
	categoryScroll.ScrollBarThickness = 4
	categoryScroll.Parent = GUI.CategoryFrame

	local categoryLayout = Instance.new("UIListLayout")
	categoryLayout.SortOrder = Enum.SortOrder.LayoutOrder
	categoryLayout.Padding = UDim.new(0, 5)
	categoryLayout.Parent = categoryScroll

	-- Right content area
	GUI.ContentFrame = Utils.CreateRoundFrame(GUI.MainFrame, {
		Size = UDim2.new(0, 390, 1, -20),
		Position = UDim2.new(0, 200, 0, 10),
		BackgroundColor3 = Config.Colors.Secondary,
		CornerRadius = 6
	})

	-- Categories
	local categories = {
		{name = "Movement", content = "MovementContent"},
		{name = "Player", content = "PlayerContent"},
		{name = "Combat", content = "CombatContent"},
		{name = "Game", content = "GameContent"},
		{name = "ESP & Nametags", content = "ESPContent"},
		{name = "Unsichtbarkeit", content = "InvisibilityContent"},
		{name = "Noclip", content = "NoclipContent"}
	}

	GUI.CategoryButtons = {}
	GUI.ContentFrames = {}

	for i, category in ipairs(categories) do
		local btn = Utils.CreateButton(categoryScroll, {
			Size = UDim2.new(1, 0, 0, 30),
			Text = category.name,
			BackgroundColor3 = Config.Colors.Primary
		})

		btn.MouseButton1Click:Connect(function()
			GUI.ShowCategory(category.content)
		end)

		GUI.CategoryButtons[category.name] = btn

		-- Update scroll canvas
		categoryScroll.CanvasSize = UDim2.new(0, 0, 0, i * 35)
	end

	GUI.CreateCategoryContents()
	GUI.ShowCategory("MovementContent")
end

-- Create category content frames
function GUI.CreateCategoryContents()
	-- Movement Content
	GUI.ContentFrames.MovementContent = GUI.CreateMovementContent()
	GUI.ContentFrames.PlayerContent = GUI.CreatePlayerContent()
	GUI.ContentFrames.GameContent = GUI.CreateGameContent()
	GUI.ContentFrames.ESPContent = GUI.CreateESPContent()
	GUI.ContentFrames.InvisibilityContent = GUI.CreateInvisibilityContent()
	GUI.ContentFrames.NoclipContent = GUI.CreateNoclipContent()
end

function GUI.CreateMovementContent()
	local content = Instance.new("ScrollingFrame")
	content.Size = UDim2.new(1, -20, 1, -20)
	content.Position = UDim2.new(0, 10, 0, 10)
	content.BackgroundTransparency = 1
	content.BorderSizePixel = 0
	content.ScrollBarThickness = 4
	content.Visible = false
	content.Parent = GUI.ContentFrame

	local layout = Instance.new("UIListLayout")
	layout.SortOrder = Enum.SortOrder.LayoutOrder
	layout.Padding = UDim.new(0, 10)
	layout.Parent = content

	-- Fly Toggle
	local flyBtn = Utils.CreateButton(content, {
		Size = UDim2.new(1, 0, 0, 40),
		Text = "Fly: OFF",
		BackgroundColor3 = Config.Colors.Secondary
	})

	flyBtn.MouseButton1Click:Connect(function()
		Features.Fly.Toggle()
		flyBtn.Text = "Fly: " .. (Config.Features.Fly.enabled and "ON" or "OFF")
		flyBtn.BackgroundColor3 = Config.Features.Fly.enabled and Config.Colors.Success or Config.Colors.Secondary
	end)

	-- Fly Speed Slider
	local flySpeedLabel = Instance.new("TextLabel")
	flySpeedLabel.Size = UDim2.new(1, 0, 0, 25)
	flySpeedLabel.BackgroundTransparency = 1
	flySpeedLabel.Text = "Fly Speed: " .. Config.Features.Fly.speed
	flySpeedLabel.TextColor3 = Config.Colors.Text
	flySpeedLabel.TextXAlignment = Enum.TextXAlignment.Left
	flySpeedLabel.Font = Enum.Font.Gotham
	flySpeedLabel.Parent = content

	local flySpeedSlider = Utils.CreateSlider(content, {
		Position = UDim2.new(0, 0, 0, 0),
		Min = 1,
		Max = 100,
		Value = Config.Features.Fly.speed,
		Callback = function(value)
			Config.Features.Fly.speed = value
			flySpeedLabel.Text = "Fly Speed: " .. math.floor(value)
		end
	})

	-- Speed Slider
	local speedLabel = Instance.new("TextLabel")
	speedLabel.Size = UDim2.new(1, 0, 0, 25)
	speedLabel.BackgroundTransparency = 1
	speedLabel.Text = "Walk Speed: " .. Config.Features.Speed.value
	speedLabel.TextColor3 = Config.Colors.Text
	speedLabel.TextXAlignment = Enum.TextXAlignment.Left
	speedLabel.Font = Enum.Font.Gotham
	speedLabel.Parent = content

	local speedSlider = Utils.CreateSlider(content, {
		Position = UDim2.new(0, 0, 0, 0),
		Min = 1,
		Max = 100,
		Value = Config.Features.Speed.value,
		Callback = function(value)
			Config.Features.Speed.value = value
			speedLabel.Text = "Walk Speed: " .. math.floor(value)
			if Humanoid then
				Humanoid.WalkSpeed = value
			end
		end
	})

	-- Jump Power Slider
	local jumpLabel = Instance.new("TextLabel")
	jumpLabel.Size = UDim2.new(1, 0, 0, 25)
	jumpLabel.BackgroundTransparency = 1
	jumpLabel.Text = "Jump Power: " .. Config.Features.JumpPower.value
	jumpLabel.TextColor3 = Config.Colors.Text
	jumpLabel.TextXAlignment = Enum.TextXAlignment.Left
	jumpLabel.Font = Enum.Font.Gotham
	jumpLabel.Parent = content

	local jumpSlider = Utils.CreateSlider(content, {
		Position = UDim2.new(0, 0, 0, 0),
		Min = 1,
		Max = 200,
		Value = Config.Features.JumpPower.value,
		Callback = function(value)
			Config.Features.JumpPower.value = value
			jumpLabel.Text = "Jump Power: " .. math.floor(value)
			if Humanoid then
				Humanoid.JumpPower = value
			end
		end
	})

	-- Noclip Toggle
	local noclipBtn = Utils.CreateButton(content, {
		Size = UDim2.new(1, 0, 0, 40),
		Text = "Noclip: OFF",
		BackgroundColor3 = Config.Colors.Secondary
	})

	noclipBtn.MouseButton1Click:Connect(function()
		Features.Noclip.Toggle()
		noclipBtn.Text = "Noclip: " .. (Config.Features.Noclip.enabled and "ON" or "OFF")
		noclipBtn.BackgroundColor3 = Config.Features.Noclip.enabled and Config.Colors.Success or Config.Colors.Secondary
	end)

	content.CanvasSize = UDim2.new(0, 0, 0, 300)
	return content
end

function GUI.CreatePlayerContent()
	local content = Instance.new("ScrollingFrame")
	content.Size = UDim2.new(1, -20, 1, -20)
	content.Position = UDim2.new(0, 10, 0, 10)
	content.BackgroundTransparency = 1
	content.BorderSizePixel = 0
	content.ScrollBarThickness = 4
	content.Visible = false
	content.Parent = GUI.ContentFrame

	local layout = Instance.new("UIListLayout")
	layout.SortOrder = Enum.SortOrder.LayoutOrder
	layout.Padding = UDim.new(0, 10)
	layout.Parent = content

	-- Teleport to Cursor
	local teleportBtn = Utils.CreateButton(content, {
		Size = UDim2.new(1, 0, 0, 40),
		Text = "Teleport to Cursor",
		BackgroundColor3 = Config.Colors.Secondary
	})

	teleportBtn.MouseButton1Click:Connect(function()
		local mouse = Player:GetMouse()
		if mouse.Hit and RootPart then
			RootPart.CFrame = CFrame.new(mouse.Hit.Position + Vector3.new(0, 5, 0))
		end
	end)

	-- Reset Character
	local resetBtn = Utils.CreateButton(content, {
		Size = UDim2.new(1, 0, 0, 40),
		Text = "Reset Character",
		BackgroundColor3 = Config.Colors.Secondary
	})

	resetBtn.MouseButton1Click:Connect(function()
		if Character and Character:FindFirstChild("Humanoid") then
			Character.Humanoid.Health = 0
		end
	end)

	content.CanvasSize = UDim2.new(0, 0, 0, 100)
	return content
end

function GUI.CreateGameContent()
	local content = Instance.new("ScrollingFrame")
	content.Size = UDim2.new(1, -20, 1, -20)
	content.Position = UDim2.new(0, 10, 0, 10)
	content.BackgroundTransparency = 1
	content.BorderSizePixel = 0
	content.ScrollBarThickness = 4
	content.Visible = false
	content.Parent = GUI.ContentFrame

	local layout = Instance.new("UIListLayout")
	layout.SortOrder = Enum.SortOrder.LayoutOrder
	layout.Padding = UDim.new(0, 10)
	layout.Parent = content

	-- Give All Items
	local itemsBtn = Utils.CreateButton(content, {
		Size = UDim2.new(1, 0, 0, 40),
		Text = "Give All Items",
		BackgroundColor3 = Config.Colors.Secondary
	})

	itemsBtn.MouseButton1Click:Connect(function()
		Features.GiveAllItems.Execute()
	end)

	content.CanvasSize = UDim2.new(0, 0, 0, 50)
	return content
end

function GUI.CreateESPContent()
	local content = Instance.new("ScrollingFrame")
	content.Size = UDim2.new(1, -20, 1, -20)
	content.Position = UDim2.new(0, 10, 0, 10)
	content.BackgroundTransparency = 1
	content.BorderSizePixel = 0
	content.ScrollBarThickness = 4
	content.Visible = false
	content.Parent = GUI.ContentFrame

	local layout = Instance.new("UIListLayout")
	layout.SortOrder = Enum.SortOrder.LayoutOrder
	layout.Padding = UDim.new(0, 10)
	layout.Parent = content

	-- ESP Toggle
	local espBtn = Utils.CreateButton(content, {
		Size = UDim2.new(1, 0, 0, 40),
		Text = "ESP: OFF",
		BackgroundColor3 = Config.Colors.Secondary
	})

	espBtn.MouseButton1Click:Connect(function()
		Features.ESP.Toggle()
		espBtn.Text = "ESP: " .. (Config.Features.ESP.enabled and "ON" or "OFF")
		espBtn.BackgroundColor3 = Config.Features.ESP.enabled and Config.Colors.Success or Config.Colors.Secondary
	end)

	-- ESP Transparency Slider
	local espTransLabel = Instance.new("TextLabel")
	espTransLabel.Size = UDim2.new(1, 0, 0, 25)
	espTransLabel.BackgroundTransparency = 1
	espTransLabel.Text = "ESP Transparency: " .. math.floor((1 - Config.Features.ESP.transparency) * 100) .. "%"
	espTransLabel.TextColor3 = Config.Colors.Text
	espTransLabel.TextXAlignment = Enum.TextXAlignment.Left
	espTransLabel.Font = Enum.Font.Gotham
	espTransLabel.Parent = content

	local espTransSlider = Utils.CreateSlider(content, {
		Position = UDim2.new(0, 0, 0, 0),
		Min = 0,
		Max = 1,
		Value = 1 - Config.Features.ESP.transparency,
		Callback = function(value)
			Config.Features.ESP.transparency = 1 - value
			espTransLabel.Text = "ESP Transparency: " .. math.floor(value * 100) .. "%"

			-- Update existing highlights
			for player, highlight in pairs(espHighlights) do
				if highlight then
					highlight.FillTransparency = Config.Features.ESP.transparency
				end
			end
		end
	})

	-- Nametags Toggle
	local nametagsBtn = Utils.CreateButton(content, {
		Size = UDim2.new(1, 0, 0, 40),
		Text = "Nametags: OFF",
		BackgroundColor3 = Config.Colors.Secondary
	})

	nametagsBtn.MouseButton1Click:Connect(function()
		Features.Nametags.Toggle()
		nametagsBtn.Text = "Nametags: " .. (Config.Features.Nametags.enabled and "ON" or "OFF")
		nametagsBtn.BackgroundColor3 = Config.Features.Nametags.enabled and Config.Colors.Success or Config.Colors.Secondary
	end)

	-- Nametag Size Slider
	local nametagSizeLabel = Instance.new("TextLabel")
	nametagSizeLabel.Size = UDim2.new(1, 0, 0, 25)
	nametagSizeLabel.BackgroundTransparency = 1
	nametagSizeLabel.Text = "Nametag Size: " .. Config.Features.Nametags.size
	nametagSizeLabel.TextColor3 = Config.Colors.Text
	nametagSizeLabel.TextXAlignment = Enum.TextXAlignment.Left
	nametagSizeLabel.Font = Enum.Font.Gotham
	nametagSizeLabel.Parent = content

	local nametagSizeSlider = Utils.CreateSlider(content, {
		Position = UDim2.new(0, 0, 0, 0),
		Min = 8,
		Max = 32,
		Value = Config.Features.Nametags.size,
		Callback = function(value)
			Config.Features.Nametags.size = value
			nametagSizeLabel.Text = "Nametag Size: " .. math.floor(value)
		end
	})

	content.CanvasSize = UDim2.new(0, 0, 0, 250)
	return content
end

function GUI.CreateInvisibilityContent()
	local content = Instance.new("ScrollingFrame")
	content.Size = UDim2.new(1, -20, 1, -20)
	content.Position = UDim2.new(0, 10, 0, 10)
	content.BackgroundTransparency = 1
	content.BorderSizePixel = 0
	content.ScrollBarThickness = 4
	content.Visible = false
	content.Parent = GUI.ContentFrame

	local layout = Instance.new("UIListLayout")
	layout.SortOrder = Enum.SortOrder.LayoutOrder
	layout.Padding = UDim.new(0, 10)
	layout.Parent = content

	-- Invisibility Toggle
	local invisBtn = Utils.CreateButton(content, {
		Size = UDim2.new(1, 0, 0, 40),
		Text = "Invisible: OFF",
		BackgroundColor3 = Config.Colors.Secondary
	})

	invisBtn.MouseButton1Click:Connect(function()
		Features.Invisible.Toggle()
		invisBtn.Text = "Invisible: " .. (Config.Features.Invisible.enabled and "ON" or "OFF")
		invisBtn.BackgroundColor3 = Config.Features.Invisible.enabled and Config.Colors.Success or Config.Colors.Secondary
	end)

	content.CanvasSize = UDim2.new(0, 0, 0, 50)
	return content
end

function GUI.CreateNoclipContent()
	local content = Instance.new("ScrollingFrame")
	content.Size = UDim2.new(1, -20, 1, -20)
	content.Position = UDim2.new(0, 10, 0, 10)
	content.BackgroundTransparency = 1
	content.BorderSizePixel = 0
	content.ScrollBarThickness = 4
	content.Visible = false
	content.Parent = GUI.ContentFrame

	local layout = Instance.new("UIListLayout")
	layout.SortOrder = Enum.SortOrder.LayoutOrder
	layout.Padding = UDim.new(0, 10)
	layout.Parent = content

	-- Noclip Toggle (duplicate for separate category)
	local noclipBtn = Utils.CreateButton(content, {
		Size = UDim2.new(1, 0, 0, 40),
		Text = "Noclip: OFF",
		BackgroundColor3 = Config.Colors.Secondary
	})

	noclipBtn.MouseButton1Click:Connect(function()
		Features.Noclip.Toggle()
		noclipBtn.Text = "Noclip: " .. (Config.Features.Noclip.enabled and "ON" or "OFF")
		noclipBtn.BackgroundColor3 = Config.Features.Noclip.enabled and Config.Colors.Success or Config.Colors.Secondary
	end)

	content.CanvasSize = UDim2.new(0, 0, 0, 50)
	return content
end

-- Settings Frame
function GUI.CreateSettingsFrame()
	GUI.SettingsFrame = Utils.CreateRoundFrame(GUI.ScreenGui, {
		Size = UDim2.new(0, 400, 0, 300),
		Position = UDim2.new(0.5, -200, 0.5, -150),
		BackgroundColor3 = Config.Colors.Primary,
		CornerRadius = 12,
		Shadow = true
	})
	GUI.SettingsFrame.Visible = false

	local settingsTitle = Instance.new("TextLabel")
	settingsTitle.Size = UDim2.new(1, -40, 0, 40)
	settingsTitle.Position = UDim2.new(0, 20, 0, 10)
	settingsTitle.BackgroundTransparency = 1
	settingsTitle.Text = "Settings"
	settingsTitle.TextColor3 = Config.Colors.Text
	settingsTitle.TextXAlignment = Enum.TextXAlignment.Left
	settingsTitle.TextScaled = true
	settingsTitle.Font = Enum.Font.GothamBold
	settingsTitle.Parent = GUI.SettingsFrame

	local closeBtn = Utils.CreateButton(GUI.SettingsFrame, {
		Size = UDim2.new(0, 30, 0, 30),
		Position = UDim2.new(1, -40, 0, 10),
		Text = "✕",
		BackgroundColor3 = Config.Colors.Secondary
	})

	closeBtn.MouseButton1Click:Connect(function()
		GUI.ToggleSettingsFrame()
	end)

	-- Color Settings
	local primaryLabel = Instance.new("TextLabel")
	primaryLabel.Size = UDim2.new(0, 150, 0, 25)
	primaryLabel.Position = UDim2.new(0, 20, 0, 60)
	primaryLabel.BackgroundTransparency = 1
	primaryLabel.Text = "Primary Color:"
	primaryLabel.TextColor3 = Config.Colors.Text
	primaryLabel.TextXAlignment = Enum.TextXAlignment.Left
	primaryLabel.Font = Enum.Font.Gotham
	primaryLabel.Parent = GUI.SettingsFrame

	local colorButtons = {"Red", "Blue", "Green", "Purple", "Orange"}
	local colors = {
		Color3.fromRGB(80, 25, 25),
		Color3.fromRGB(25, 25, 80),
		Color3.fromRGB(25, 80, 25),
		Color3.fromRGB(80, 25, 80),
		Color3.fromRGB(80, 50, 25)
	}

	for i, colorName in ipairs(colorButtons) do
		local colorBtn = Utils.CreateButton(GUI.SettingsFrame, {
			Size = UDim2.new(0, 60, 0, 25),
			Position = UDim2.new(0, 170 + (i-1) * 65, 0, 60),
			Text = colorName,
			BackgroundColor3 = colors[i]
		})

		colorBtn.MouseButton1Click:Connect(function()
			Config.Colors.Primary = colors[i]
			GUI.UpdateColors()
		end)
	end

	-- Hotkey Settings
	local hotkeyLabel = Instance.new("TextLabel")
	hotkeyLabel.Size = UDim2.new(0, 150, 0, 25)
	hotkeyLabel.Position = UDim2.new(0, 20, 0, 100)
	hotkeyLabel.BackgroundTransparency = 1
	hotkeyLabel.Text = "Toggle Hotkey:"
	hotkeyLabel.TextColor3 = Config.Colors.Text
	hotkeyLabel.TextXAlignment = Enum.TextXAlignment.Left
	hotkeyLabel.Font = Enum.Font.Gotham
	hotkeyLabel.Parent = GUI.SettingsFrame

	local hotkeyBtn = Utils.CreateButton(GUI.SettingsFrame, {
		Size = UDim2.new(0, 100, 0, 25),
		Position = UDim2.new(0, 170, 0, 100),
		Text = Config.ToggleKey.Name,
		BackgroundColor3 = Config.Colors.Secondary
	})

	local listeningForKey = false
	hotkeyBtn.MouseButton1Click:Connect(function()
		if not listeningForKey then
			listeningForKey = true
			hotkeyBtn.Text = "Press Key..."

			local connection
			connection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
				if not gameProcessed and input.UserInputType == Enum.UserInputType.Keyboard then
					Config.ToggleKey = input.KeyCode
					hotkeyBtn.Text = input.KeyCode.Name
					listeningForKey = false
					connection:Disconnect()
				end
			end)
		end
	end)
end

-- GUI Control Functions
function GUI.ShowCategory(categoryName)
	-- Hide all content frames
	for _, frame in pairs(GUI.ContentFrames) do
		if frame then
			frame.Visible = false
		end
	end

	-- Show selected category
	if GUI.ContentFrames[categoryName] then
		GUI.ContentFrames[categoryName].Visible = true
	end
end

function GUI.ToggleMainFrame()
	if GUI.MainFrame then
		GUI.MainFrame.Visible = not GUI.MainFrame.Visible
	end
end

function GUI.ToggleSettingsFrame()
	if not GUI.SettingsFrame then
		GUI.CreateSettingsFrame()
	end
	GUI.SettingsFrame.Visible = not GUI.SettingsFrame.Visible
end

function GUI.ToggleInterface()
	if GUI.HeaderBar then
		local visible = GUI.HeaderBar.Visible
		GUI.HeaderBar.Visible = not visible
		if GUI.MainFrame then
			GUI.MainFrame.Visible = not visible
		end
		if GUI.SettingsFrame then
			GUI.SettingsFrame.Visible = false
		end
	end
end

function GUI.UpdateColors()
	-- Update all GUI elements with new colors
	if GUI.HeaderBar then GUI.HeaderBar.BackgroundColor3 = Config.Colors.Primary end
	if GUI.MainFrame then GUI.MainFrame.BackgroundColor3 = Config.Colors.Primary end
	if GUI.CategoryFrame then GUI.CategoryFrame.BackgroundColor3 = Config.Colors.Secondary end
	if GUI.ContentFrame then GUI.ContentFrame.BackgroundColor3 = Config.Colors.Secondary end
	if GUI.SettingsFrame then GUI.SettingsFrame.BackgroundColor3 = Config.Colors.Primary end
end

-- =========================
-- INPUT HANDLING
-- =========================
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end

	if input.UserInputType == Enum.UserInputType.Keyboard then
		if input.KeyCode == Config.ToggleKey then
			GUI.ToggleInterface()
		elseif input.KeyCode == Config.Features.Fly.hotkey then
			Features.Fly.Toggle()
		end
	end
end)

-- =========================
-- CHARACTER RESPAWN HANDLING
-- =========================
Player.CharacterAdded:Connect(function(newCharacter)
	Character = newCharacter
	Humanoid = Character:WaitForChild("Humanoid")
	RootPart = Character:WaitForChild("HumanoidRootPart")

	-- Reapply speed and jump settings
	Humanoid.WalkSpeed = Config.Features.Speed.value
	Humanoid.JumpPower = Config.Features.JumpPower.value

	-- Reapply features that were enabled
	if Config.Features.Fly.enabled then
		Features.Fly.Disable()
		wait(1)
		Features.Fly.Enable()
	end

	if Config.Features.Noclip.enabled then
		Features.Noclip.Enable()
	end

	if Config.Features.Invisible.enabled then
		wait(1)
		Features.Invisible.Toggle()
		Features.Invisible.Toggle()
	end
end)

-- =========================
-- INITIALIZATION
-- =========================
GUI.CreateLoadingScreen()

-- Notification
StarterGui:SetCore("SendNotification", {
	Title = "Vyrxis Menu";
	Text = "Successfully loaded! Press " .. Config.ToggleKey.Name .. " to toggle.";
	Duration = 5;
})
