local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local Mouse = LocalPlayer:GetMouse()

-- Globale Variablen
local VyrxisGui = nil
local MainFrame = nil
local MainRahmen = nil
local SettingsFrame = nil
local Liste = nil
local currentCategoryFrame = nil
local loadScreenShown = false

-- Settings
local settings = {
    menuKey = Enum.KeyCode.Insert,
    flyEnabled = false,
    flySpeed = 50,
    walkSpeed = 16,
    jumpHeight = 50,
    noclipEnabled = false,
    espEnabled = false,
    espColor = Color3.fromRGB(255, 0, 0),
    espTransparency = 0.5,
    nametagsEnabled = false,
    nametagColor = Color3.fromRGB(255, 255, 255),
    nametagSize = 20,
    selectedPlayer = nil
}

-- States
local flyConnection = nil
local noclipConnection = nil
local espObjects = {}
local nametagObjects = {}
local viewConnection = nil
local originalCamera = nil

-- Utility Functions
local function createTween(object, info, properties)
    local tween = TweenService:Create(object, info, properties)
    tween:Play()
    return tween
end

local function round(num, places)
    local mult = 10^(places or 0)
    return math.floor(num * mult + 0.5) / mult
end

-- Load Screen
local function createLoadScreen()
    if loadScreenShown then return end
    loadScreenShown = true
    
    local loadGui = Instance.new("ScreenGui")
    loadGui.Name = "VyrxisLoadScreen"
    loadGui.Parent = PlayerGui
    
    local loadFrame = Instance.new("Frame")
    loadFrame.Size = UDim2.new(1, 0, 1, 0)
    loadFrame.Position = UDim2.new(0, 0, 0, 0)
    loadFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    loadFrame.BackgroundTransparency = 0.3
    loadFrame.Parent = loadGui
    
    local loadText = Instance.new("TextLabel")
    loadText.Size = UDim2.new(0, 400, 0, 50)
    loadText.Position = UDim2.new(0.5, -200, 0.9, -25)
    loadText.BackgroundTransparency = 1
    loadText.Text = "Vyrxis Menu Starting..."
    loadText.TextColor3 = Color3.fromRGB(64, 224, 208)
    loadText.TextScaled = true
    loadText.Font = Enum.Font.GothamBold
    loadText.Parent = loadFrame
    
    -- TÃ¼rkise Effekte
    for i = 1, 8 do
        local effect = Instance.new("Frame")
        effect.Size = UDim2.new(0, 100, 0, 100)
        effect.BackgroundColor3 = Color3.fromRGB(64, 224, 208)
        effect.BackgroundTransparency = 0.7
        effect.BorderSizePixel = 0
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(1, 0)
        corner.Parent = effect
        
        -- Positionierung am Rand
        if i <= 2 then
            effect.Position = UDim2.new(math.random(0, 80)/100, 0, math.random(0, 20)/100, 0)
        elseif i <= 4 then
            effect.Position = UDim2.new(math.random(80, 100)/100, 0, math.random(0, 100)/100, 0)
        elseif i <= 6 then
            effect.Position = UDim2.new(math.random(0, 100)/100, 0, math.random(80, 100)/100, 0)
        else
            effect.Position = UDim2.new(math.random(0, 20)/100, 0, math.random(20, 80)/100, 0)
        end
        
        effect.Parent = loadFrame
        
        -- Animation
        createTween(effect, TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {
            BackgroundTransparency = 0.9,
            Rotation = 360
        })
    end
    
    -- Text Animation
    createTween(loadText, TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {
        TextTransparency = 0.3
    })
    
    -- Nach 5 Sekunden entfernen
    wait(5)
    createTween(loadFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {
        BackgroundTransparency = 1
    })
    createTween(loadText, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {
        TextTransparency = 1
    })
    
    wait(0.5)
    loadGui:Destroy()
end

-- UI Creation
local function createMainUI()
    VyrxisGui = Instance.new("ScreenGui")
    VyrxisGui.Name = "VyrxisMenu"
    VyrxisGui.Parent = PlayerGui
    VyrxisGui.ResetOnSpawn = false
    
    -- MainRahmen (Drag Handle)
    MainRahmen = Instance.new("Frame")
    MainRahmen.Name = "MainRahmen"
    MainRahmen.Size = UDim2.new(0, 600, 0, 40)
    MainRahmen.Position = UDim2.new(0.5, -300, 0.5, -200)
    MainRahmen.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    MainRahmen.BorderSizePixel = 0
    MainRahmen.Parent = VyrxisGui
    
    local rahmenCorner = Instance.new("UICorner")
    rahmenCorner.CornerRadius = UDim.new(0, 8)
    rahmenCorner.Parent = MainRahmen
    
    -- Title
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(0, 200, 1, 0)
    title.Position = UDim2.new(0, 10, 0, 0)
    title.BackgroundTransparency = 1
    title.Text = "Vyrxis Menu"
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.TextScaled = true
    title.Font = Enum.Font.GothamBold
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Parent = MainRahmen
    
    -- Minimize Button
    local minimizeBtn = Instance.new("TextButton")
    minimizeBtn.Size = UDim2.new(0, 30, 0, 30)
    minimizeBtn.Position = UDim2.new(1, -120, 0, 5)
    minimizeBtn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    minimizeBtn.Text = "-"
    minimizeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    minimizeBtn.TextScaled = true
    minimizeBtn.Font = Enum.Font.GothamBold
    minimizeBtn.BorderSizePixel = 0
    minimizeBtn.Parent = MainRahmen
    
    local minCorner = Instance.new("UICorner")
    minCorner.CornerRadius = UDim.new(0, 4)
    minCorner.Parent = minimizeBtn
    
    -- Settings Button
    local settingsBtn = Instance.new("TextButton")
    settingsBtn.Size = UDim2.new(0, 80, 0, 30)
    settingsBtn.Position = UDim2.new(1, -80, 0, 5)
    settingsBtn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    settingsBtn.Text = "Settings"
    settingsBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    settingsBtn.TextScaled = true
    settingsBtn.Font = Enum.Font.Gotham
    settingsBtn.BorderSizePixel = 0
    settingsBtn.Parent = MainRahmen
    
    local setCorner = Instance.new("UICorner")
    setCorner.CornerRadius = UDim.new(0, 4)
    setCorner.Parent = settingsBtn
    
    -- MainFrame
    MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 600, 0, 360)
    MainFrame.Position = UDim2.new(0, 0, 1, 0)
    MainFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    MainFrame.BorderSizePixel = 0
    MainFrame.Parent = MainRahmen
    
    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, 8)
    mainCorner.Parent = MainFrame
    
    -- Shadow
    local shadow = Instance.new("Frame")
    shadow.Size = UDim2.new(1, 10, 1, 10)
    shadow.Position = UDim2.new(0, -5, 0, -5)
    shadow.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    shadow.BackgroundTransparency = 0.7
    shadow.BorderSizePixel = 0
    shadow.ZIndex = MainFrame.ZIndex - 1
    shadow.Parent = MainFrame
    
    local shadowCorner = Instance.new("UICorner")
    shadowCorner.CornerRadius = UDim.new(0, 8)
    shadowCorner.Parent = shadow
    
    -- Liste (Categories)
    Liste = Instance.new("ScrollingFrame")
    Liste.Name = "Liste"
    Liste.Size = UDim2.new(0, 150, 1, -20)
    Liste.Position = UDim2.new(0, 10, 0, 10)
    Liste.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    Liste.BorderSizePixel = 0
    Liste.ScrollBarThickness = 4
    Liste.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
    Liste.Parent = MainFrame
    
    local listeCorner = Instance.new("UICorner")
    listeCorner.CornerRadius = UDim.new(0, 6)
    listeCorner.Parent = Liste
    
    local listeLayout = Instance.new("UIListLayout")
    listeLayout.Padding = UDim.new(0, 5)
    listeLayout.Parent = Liste
    
    -- Drag functionality
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    MainRahmen.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = MainRahmen.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            MainRahmen.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    -- Minimize functionality
    minimizeBtn.MouseButton1Click:Connect(function()
        if MainFrame.Visible then
            createTween(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {
                Size = UDim2.new(0, 600, 0, 0)
            })
            wait(0.3)
            MainFrame.Visible = false
        else
            MainFrame.Visible = true
            MainFrame.Size = UDim2.new(0, 600, 0, 0)
            createTween(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {
                Size = UDim2.new(0, 600, 0, 360)
            })
        end
    end)
    
    -- Settings functionality
    settingsBtn.MouseButton1Click:Connect(function()
        if SettingsFrame then
            SettingsFrame.Visible = true
        end
    end)
end

-- Settings Frame
local function createSettingsFrame()
    SettingsFrame = Instance.new("Frame")
    SettingsFrame.Name = "SettingsFrame"
    SettingsFrame.Size = UDim2.new(0, 300, 0, 200)
    SettingsFrame.Position = UDim2.new(0.5, -150, 0.5, -100)
    SettingsFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    SettingsFrame.BorderSizePixel = 0
    SettingsFrame.Visible = false
    SettingsFrame.Parent = VyrxisGui
    
    local settingsCorner = Instance.new("UICorner")
    settingsCorner.CornerRadius = UDim.new(0, 8)
    settingsCorner.Parent = SettingsFrame
    
    -- Close Button
    local closeBtn = Instance.new("TextButton")
    closeBtn.Size = UDim2.new(0, 25, 0, 25)
    closeBtn.Position = UDim2.new(1, -30, 0, 5)
    closeBtn.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    closeBtn.Text = "X"
    closeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeBtn.TextScaled = true
    closeBtn.Font = Enum.Font.GothamBold
    closeBtn.BorderSizePixel = 0
    closeBtn.Parent = SettingsFrame
    
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 4)
    closeCorner.Parent = closeBtn
    
    -- Title
    local settingsTitle = Instance.new("TextLabel")
    settingsTitle.Size = UDim2.new(1, -40, 0, 30)
    settingsTitle.Position = UDim2.new(0, 10, 0, 5)
    settingsTitle.BackgroundTransparency = 1
    settingsTitle.Text = "Settings"
    settingsTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    settingsTitle.TextScaled = true
    settingsTitle.Font = Enum.Font.GothamBold
    settingsTitle.TextXAlignment = Enum.TextXAlignment.Left
    settingsTitle.Parent = SettingsFrame
    
    -- Keybind Text
    local keybindLabel = Instance.new("TextLabel")
    keybindLabel.Size = UDim2.new(1, -20, 0, 30)
    keybindLabel.Position = UDim2.new(0, 10, 0, 50)
    keybindLabel.BackgroundTransparency = 1
    keybindLabel.Text = "Menu Toggle Key: " .. settings.menuKey.Name
    keybindLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    keybindLabel.TextScaled = true
    keybindLabel.Font = Enum.Font.Gotham
    keybindLabel.TextXAlignment = Enum.TextXAlignment.Left
    keybindLabel.Parent = SettingsFrame
    
    -- Keybind Button
    local keybindBtn = Instance.new("TextButton")
    keybindBtn.Size = UDim2.new(0, 100, 0, 30)
    keybindBtn.Position = UDim2.new(0, 10, 0, 90)
    keybindBtn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    keybindBtn.Text = "Change Key"
    keybindBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    keybindBtn.TextScaled = true
    keybindBtn.Font = Enum.Font.Gotham
    keybindBtn.BorderSizePixel = 0
    keybindBtn.Parent = SettingsFrame
    
    local keybindCorner = Instance.new("UICorner")
    keybindCorner.CornerRadius = UDim.new(0, 4)
    keybindCorner.Parent = keybindBtn
    
    closeBtn.MouseButton1Click:Connect(function()
        SettingsFrame.Visible = false
    end)
    
    keybindBtn.MouseButton1Click:Connect(function()
        keybindBtn.Text = "Press any key..."
        local connection
        connection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
            if not gameProcessed and input.UserInputType == Enum.UserInputType.Keyboard then
                settings.menuKey = input.KeyCode
                keybindLabel.Text = "Menu Toggle Key: " .. settings.menuKey.Name
                keybindBtn.Text = "Change Key"
                connection:Disconnect()
            end
        end)
    end)
end

-- Category Creation
local function createCategoryButton(name, callback)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(1, -10, 0, 30)
    btn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    btn.Text = name
    btn.TextColor3 = Color3.fromRGB(255, 255, 255)
    btn.TextScaled = true
    btn.Font = Enum.Font.Gotham
    btn.BorderSizePixel = 0
    btn.Parent = Liste
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 4)
    corner.Parent = btn
    
    btn.MouseButton1Click:Connect(callback)
    
    Liste.CanvasSize = UDim2.new(0, 0, 0, (#Liste:GetChildren() - 1) * 35)
end

local function closeCategoryFrame()
    if currentCategoryFrame then
        currentCategoryFrame:Destroy()
        currentCategoryFrame = nil
    end
end

local function createCategoryFrame(name)
    closeCategoryFrame()
    
    currentCategoryFrame = Instance.new("ScrollingFrame")
    currentCategoryFrame.Name = name .. "Frame"
    currentCategoryFrame.Size = UDim2.new(0, 420, 1, -20)
    currentCategoryFrame.Position = UDim2.new(0, 170, 0, 10)
    currentCategoryFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    currentCategoryFrame.BorderSizePixel = 0
    currentCategoryFrame.ScrollBarThickness = 4
    currentCategoryFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
    currentCategoryFrame.Parent = MainFrame
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = currentCategoryFrame
    
    local layout = Instance.new("UIListLayout")
    layout.Padding = UDim.new(0, 10)
    layout.Parent = currentCategoryFrame
    
    return currentCategoryFrame
end

-- UI Elements
local function createButton(parent, text, callback)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(0, 200, 0, 30)
    btn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    btn.Text = text
    btn.TextColor3 = Color3.fromRGB(255, 255, 255)
    btn.TextScaled = true
    btn.Font = Enum.Font.Gotham
    btn.BorderSizePixel = 0
    btn.Parent = parent
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 4)
    corner.Parent = btn
    
    if callback then
        btn.MouseButton1Click:Connect(function()
            callback()
        end)
    end
    return btn
end

local function createSlider(parent, text, min, max, current, callback)
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, -20, 0, 60)
    frame.BackgroundTransparency = 1
    frame.Parent = parent
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 0, 20)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text .. ": " .. current
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextScaled = true
    label.Font = Enum.Font.Gotham
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = frame
    
    local slider = Instance.new("Frame")
    slider.Size = UDim2.new(1, 0, 0, 20)
    slider.Position = UDim2.new(0, 0, 0, 25)
    slider.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
    slider.BorderSizePixel = 0
    slider.Parent = frame
    
    local sliderCorner = Instance.new("UICorner")
    sliderCorner.CornerRadius = UDim.new(0, 4)
    sliderCorner.Parent = slider
    
    local fill = Instance.new("Frame")
    fill.Size = UDim2.new((current - min) / (max - min), 0, 1, 0)
    fill.Position = UDim2.new(0, 0, 0, 0)
    fill.BackgroundColor3 = Color3.fromRGB(0, 162, 255)
    fill.BorderSizePixel = 0
    fill.Parent = slider
    
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(0, 4)
    fillCorner.Parent = fill
    
    local dragging = false
    
    slider.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local pos = (Mouse.X - slider.AbsolutePosition.X) / slider.AbsoluteSize.X
            pos = math.clamp(pos, 0, 1)
            local value = min + (max - min) * pos
            
            fill.Size = UDim2.new(pos, 0, 1, 0)
            label.Text = text .. ": " .. round(value, 1)
            callback(value)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    return frame
end

local function createColorPicker(parent, text, currentColor, callback)
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, -20, 0, 40)
    frame.BackgroundTransparency = 1
    frame.Parent = parent
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0, 100, 1, 0)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text .. ":"
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextScaled = true
    label.Font = Enum.Font.Gotham
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = frame
    
    local colors = {
        {Color3.fromRGB(255, 0, 0), "Red"},
        {Color3.fromRGB(0, 255, 0), "Green"},
        {Color3.fromRGB(0, 0, 255), "Blue"},
        {Color3.fromRGB(255, 255, 0), "Yellow"},
        {Color3.fromRGB(255, 0, 255), "Magenta"},
        {Color3.fromRGB(0, 255, 255), "Cyan"},
        {Color3.fromRGB(255, 255, 255), "White"},
        {Color3.fromRGB(0, 0, 0), "Black"}
    }
    
    for i, colorData in ipairs(colors) do
        local colorBtn = Instance.new("TextButton")
        colorBtn.Size = UDim2.new(0, 30, 0, 30)
        colorBtn.Position = UDim2.new(0, 110 + (i-1) * 35, 0, 5)
        colorBtn.BackgroundColor3 = colorData[1]
        colorBtn.Text = ""
        colorBtn.BorderSizePixel = 1
        colorBtn.BorderColor3 = currentColor == colorData[1] and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(100, 100, 100)
        colorBtn.Parent = frame
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 4)
        corner.Parent = colorBtn
        
        colorBtn.MouseButton1Click:Connect(function()
            -- Reset all borders
            for _, child in ipairs(frame:GetChildren()) do
                if child:IsA("TextButton") and child ~= colorBtn then
                    child.BorderColor3 = Color3.fromRGB(100, 100, 100)
                end
            end
            colorBtn.BorderColor3 = Color3.fromRGB(255, 255, 255)
            callback(colorData[1])
        end)
    end
    
    return frame
end

-- Fly Functions
local function enableFly()
    if flyConnection then return end
    
    local character = LocalPlayer.Character
    if not character then return end
    
    local humanoid = character:FindFirstChild("Humanoid")
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not rootPart then return end
    
    local bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.MaxForce = Vector3.new(4000, 4000, 4000)
    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    bodyVelocity.Parent = rootPart
    
    local bodyAngularVelocity = Instance.new("BodyAngularVelocity")
    bodyAngularVelocity.MaxTorque = Vector3.new(0, math.huge, 0)
    bodyAngularVelocity.AngularVelocity = Vector3.new(0, 0, 0)
    bodyAngularVelocity.Parent = rootPart
    
    flyConnection = RunService.Heartbeat:Connect(function()
        if not rootPart.Parent then
            flyConnection:Disconnect()
            flyConnection = nil
            return
        end
        
        local camera = Workspace.CurrentCamera
        local moveVector = Vector3.new(0, 0, 0)
        
        if UserInputService:IsKeyDown(Enum.KeyCode.W) then
            moveVector = moveVector + camera.CFrame.LookVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then
            moveVector = moveVector - camera.CFrame.LookVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then
            moveVector = moveVector - camera.CFrame.RightVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then
            moveVector = moveVector + camera.CFrame.RightVector
        end
        
        bodyVelocity.Velocity = moveVector * settings.flySpeed
    end)
end

local function disableFly()
    if flyConnection then
        flyConnection:Disconnect()
        flyConnection = nil
    end
    
    local character = LocalPlayer.Character
    if character then
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            for _, obj in ipairs(rootPart:GetChildren()) do
                if obj:IsA("BodyVelocity") or obj:IsA("BodyAngularVelocity") then
                    obj:Destroy()
                end
            end
        end
    end
end

-- Noclip Functions
local function enableNoclip()
    if noclipConnection then return end
    
    noclipConnection = RunService.Stepped:Connect(function()
        local character = LocalPlayer.Character
        if character then
            for _, part in ipairs(character:GetDescendants()) do
                if part:IsA("BasePart") and part.CanCollide then
                    part.CanCollide = false
                end
            end
        end
    end)
end

local function disableNoclip()
    if noclipConnection then
        noclipConnection:Disconnect()
        noclipConnection = nil
    end
    
    local character = LocalPlayer.Character
    if character then
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                part.CanCollide = true
            end
        end
    end
end

-- ESP Functions
local function createHealthBar(player)
    if not player.Character then return end
    
    local character = player.Character
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    local humanoid = character:FindFirstChild("Humanoid")
    if not humanoidRootPart or not humanoid then return end
    
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Size = UDim2.new(0, 8, 0, 100) -- Feste GrÃ¶Ãe
    billboardGui.StudsOffset = Vector3.new(3, 0, 0)
    billboardGui.AlwaysOnTop = true -- Durch Charaktere sichtbar
    billboardGui.LightInfluence = 0
    billboardGui.Parent = humanoidRootPart
    
    local backgroundFrame = Instance.new("Frame")
    backgroundFrame.Size = UDim2.new(1, 0, 1, 0)
    backgroundFrame.Position = UDim2.new(0, 0, 0, 0)
    backgroundFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    backgroundFrame.BorderSizePixel = 1
    backgroundFrame.BorderColor3 = Color3.fromRGB(255, 255, 255)
    backgroundFrame.Parent = billboardGui
    
    local healthFrame = Instance.new("Frame")
    healthFrame.Size = UDim2.new(1, 0, humanoid.Health / humanoid.MaxHealth, 0)
    healthFrame.Position = UDim2.new(0, 0, 1 - (humanoid.Health / humanoid.MaxHealth), 0)
    healthFrame.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    healthFrame.BorderSizePixel = 0
    healthFrame.Parent = backgroundFrame
    
    -- Konstante GrÃ¶Ãe unabhÃ¤ngig von Entfernung
    local camera = Workspace.CurrentCamera
    local sizeConnection = RunService.Heartbeat:Connect(function()
        if humanoidRootPart.Parent and camera then
            local distance = (camera.CFrame.Position - humanoidRootPart.Position).Magnitude
            -- GrÃ¶Ãe bleibt konstant, wird nicht grÃ¶Ãer als Spieler
            local scale = math.max(0.3, math.min(1, 30 / distance))
            billboardGui.Size = UDim2.new(0, 8 * scale, 0, 100 * scale)
        end
    end)
    
    -- Health update connection
    local healthConnection = humanoid.HealthChanged:Connect(function(health)
        local healthPercent = health / humanoid.MaxHealth
        healthFrame.Size = UDim2.new(1, 0, healthPercent, 0)
        healthFrame.Position = UDim2.new(0, 0, 1 - healthPercent, 0)
        
        -- Farbe basierend auf Gesundheit
        if healthPercent > 0.6 then
            healthFrame.BackgroundColor3 = Color3.fromRGB(0, 255, 0) -- GrÃ¼n
        elseif healthPercent > 0.3 then
            healthFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 0) -- Gelb
        else
            healthFrame.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Rot
        end
    end)
    
    -- Cleanup connections when GUI is destroyed
    billboardGui.AncestryChanged:Connect(function()
        if not billboardGui.Parent then
            healthConnection:Disconnect()
            sizeConnection:Disconnect()
        end
    end)
    
    return {
        gui = billboardGui,
        sizeConnection = sizeConnection,
        healthConnection = healthConnection
    }
end

local function createHighlight(player)
    if espObjects[player] or not player.Character then return end
    
    local highlight = Instance.new("Highlight")
    highlight.FillColor = settings.espColor
    highlight.OutlineColor = settings.espColor
    highlight.FillTransparency = settings.espTransparency
    highlight.OutlineTransparency = 0
    highlight.Parent = player.Character
    
    -- Erstelle Healthbar
    local healthBar = createHealthBar(player)
    
    espObjects[player] = {
        highlight = highlight,
        healthBar = healthBar
    }
end

local function removeHighlight(player)
    if espObjects[player] then
        if espObjects[player].highlight then
            espObjects[player].highlight:Destroy()
        end
        if espObjects[player].healthBar then
            if espObjects[player].healthBar.gui then
                espObjects[player].healthBar.gui:Destroy()
            end
            if espObjects[player].healthBar.sizeConnection then
                espObjects[player].healthBar.sizeConnection:Disconnect()
            end
            if espObjects[player].healthBar.healthConnection then
                espObjects[player].healthBar.healthConnection:Disconnect()
            end
        end
        espObjects[player] = nil
    end
end

local function updateESP()
    if settings.espEnabled then
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                createHighlight(player)
            end
        end
    else
        for player, objects in pairs(espObjects) do
            if objects.highlight then objects.highlight:Destroy() end
            if objects.healthBar then
                if objects.healthBar.gui then objects.healthBar.gui:Destroy() end
                if objects.healthBar.sizeConnection then objects.healthBar.sizeConnection:Disconnect() end
                if objects.healthBar.healthConnection then objects.healthBar.healthConnection:Disconnect() end
            end
        end
        espObjects = {}
    end
end

-- Nametags Functions
local function createNametag(player)
    if nametagObjects[player] or not player.Character then return end
    
    local character = player.Character
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end
    
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Size = UDim2.new(0, settings.nametagSize * 10, 0, settings.nametagSize * 2)
    billboardGui.StudsOffset = Vector3.new(0, -3, 0)
    billboardGui.AlwaysOnTop = true
    billboardGui.LightInfluence = 0
    billboardGui.Parent = humanoidRootPart
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = player.Name
    textLabel.TextColor3 = settings.nametagColor
    textLabel.TextScaled = true
    textLabel.Font = Enum.Font.GothamBold
    textLabel.TextStrokeTransparency = 0
    textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    textLabel.Parent = billboardGui
    
    -- Konstante GrÃ¶Ãe unabhÃ¤ngig von Entfernung
    local camera = Workspace.CurrentCamera
    local sizeConnection = RunService.Heartbeat:Connect(function()
        if humanoidRootPart.Parent and camera then
            local distance = (camera.CFrame.Position - humanoidRootPart.Position).Magnitude
            local scale = math.max(0.5, math.min(2, 50 / distance)) -- Konstante Skalierung
            billboardGui.Size = UDim2.new(0, settings.nametagSize * 10 * scale, 0, settings.nametagSize * 2 * scale)
        end
    end)
    
    -- Cleanup connection when GUI is destroyed
    billboardGui.AncestryChanged:Connect(function()
        if not billboardGui.Parent then
            sizeConnection:Disconnect()
        end
    end)
    
    nametagObjects[player] = {
        gui = billboardGui,
        connection = sizeConnection
    }
end

local function removeNametag(player)
    if nametagObjects[player] then
        if nametagObjects[player].connection then
            nametagObjects[player].connection:Disconnect()
        end
        if nametagObjects[player].gui then
            nametagObjects[player].gui:Destroy()
        end
        nametagObjects[player] = nil
    end
end

local function updateNametags()
    if settings.nametagsEnabled then
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                createNametag(player)
            end
        end
    else
        for player, objects in pairs(nametagObjects) do
            if objects.connection then objects.connection:Disconnect() end
            if objects.gui then objects.gui:Destroy() end
        end
        nametagObjects = {}
    end
end

-- Player Functions
local function getAllPlayers()
    local playerList = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(playerList, player)
        end
    end
    return playerList
end

local function teleportToPlayer(targetPlayer)
    if not targetPlayer or not targetPlayer.Character then return end
    
    local character = LocalPlayer.Character
    local targetCharacter = targetPlayer.Character
    
    if character and targetCharacter then
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        local targetRootPart = targetCharacter:FindFirstChild("HumanoidRootPart")
        
        if humanoidRootPart and targetRootPart then
            humanoidRootPart.CFrame = targetRootPart.CFrame + Vector3.new(0, 0, -5)
        end
    end
end

local viewingPlayer = false

local function viewPlayer(targetPlayer)
    local camera = Workspace.CurrentCamera
    
    if viewingPlayer then
        -- ZurÃ¼ck zur eigenen Kamera
        if viewConnection then
            viewConnection:Disconnect()
            viewConnection = nil
        end
        camera.CameraSubject = LocalPlayer.Character.Humanoid
        viewingPlayer = false
        return false
    else
        -- Zur Zielspielerkamera wechseln
        if not targetPlayer or not targetPlayer.Character then return false end
        
        camera.CameraSubject = targetPlayer.Character.Humanoid
        viewingPlayer = true
        
        viewConnection = RunService.Heartbeat:Connect(function()
            if not targetPlayer.Character or not targetPlayer.Character.Humanoid then
                viewConnection:Disconnect()
                viewConnection = nil
                camera.CameraSubject = LocalPlayer.Character.Humanoid
                viewingPlayer = false
            end
        end)
        
        return true
    end
end

-- Give All Items Function
local function giveAllItems()
    local character = LocalPlayer.Character
    if not character then return end
    
    local backpack = LocalPlayer:FindFirstChild("Backpack")
    if not backpack then return end
    
    -- Suche nach Tools/Items im ReplicatedStorage oder ServerStorage
    for _, obj in ipairs(ReplicatedStorage:GetDescendants()) do
        if obj:IsA("Tool") then
            local hasItem = false
            for _, item in ipairs(backpack:GetChildren()) do
                if item.Name == obj.Name then
                    hasItem = true
                    break
                end
            end
            
            if not hasItem then
                local newTool = obj:Clone()
                newTool.Parent = backpack
            end
        end
    end
    
    -- Auch im Workspace suchen
    for _, obj in ipairs(Workspace:GetDescendants()) do
        if obj:IsA("Tool") and obj.Parent ~= character and obj.Parent ~= backpack then
            local hasItem = false
            for _, item in ipairs(backpack:GetChildren()) do
                if item.Name == obj.Name then
                    hasItem = true
                    break
                end
            end
            
            if not hasItem then
                local newTool = obj:Clone()
                newTool.Parent = backpack
            end
        end
    end
end

-- Create Category Frames
local function createFlyFrame()
    local frame = createCategoryFrame("Fly")
    
    local flyBtn = createButton(frame, "Fly: OFF", nil)
    
    local function updateFlyButton()
        if settings.flyEnabled then
            flyBtn.Text = "Fly: ON"
            flyBtn.BackgroundColor3 = Color3.fromRGB(0, 200, 0)
            enableFly()
        else
            flyBtn.Text = "Fly: OFF"
            flyBtn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            disableFly()
        end
    end
    
    flyBtn.MouseButton1Click:Connect(function()
        settings.flyEnabled = not settings.flyEnabled
        print("Fly toggled:", settings.flyEnabled) -- Debug
        updateFlyButton()
    end)
    
    updateFlyButton()
    
    createSlider(frame, "Fly Speed", 10, 200, settings.flySpeed, function(value)
        settings.flySpeed = value
    end)
    
    frame.CanvasSize = UDim2.new(0, 0, 0, 120)
end

local function createMeFrame()
    local frame = createCategoryFrame("Me")
    
    createButton(frame, "Give All Items", function()
        giveAllItems()
    end)
    
    createSlider(frame, "Walk Speed", 16, 100, settings.walkSpeed, function(value)
        settings.walkSpeed = value
        local character = LocalPlayer.Character
        if character then
            local humanoid = character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = value
            end
        end
    end)
    
    createSlider(frame, "Jump Height", 50, 200, settings.jumpHeight, function(value)
        settings.jumpHeight = value
        local character = LocalPlayer.Character
        if character then
            local humanoid = character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.JumpPower = value
            end
        end
    end)
    
    local noclipBtn = createButton(frame, "Noclip: OFF", nil)
    
    local function updateNoclipButton()
        if settings.noclipEnabled then
            noclipBtn.Text = "Noclip: ON"
            noclipBtn.BackgroundColor3 = Color3.fromRGB(0, 200, 0)
            enableNoclip()
        else
            noclipBtn.Text = "Noclip: OFF"
            noclipBtn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            disableNoclip()
        end
    end
    
    noclipBtn.MouseButton1Click:Connect(function()
        settings.noclipEnabled = not settings.noclipEnabled
        print("Noclip toggled:", settings.noclipEnabled) -- Debug
        updateNoclipButton()
    end)
    
    updateNoclipButton()
    
    frame.CanvasSize = UDim2.new(0, 0, 0, 220)
end

local function createPlayerFrame()
    local frame = createCategoryFrame("Player")
    
    local playerListFrame = Instance.new("Frame")
    playerListFrame.Size = UDim2.new(1, -20, 0, 150)
    playerListFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    playerListFrame.BorderSizePixel = 0
    playerListFrame.Parent = frame
    
    local playerCorner = Instance.new("UICorner")
    playerCorner.CornerRadius = UDim.new(0, 4)
    playerCorner.Parent = playerListFrame
    
    local searchBox = Instance.new("TextBox")
    searchBox.Size = UDim2.new(1, -10, 0, 25)
    searchBox.Position = UDim2.new(0, 5, 0, 5)
    searchBox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    searchBox.Text = "Search players..."
    searchBox.TextColor3 = Color3.fromRGB(200, 200, 200)
    searchBox.TextScaled = true
    searchBox.Font = Enum.Font.Gotham
    searchBox.BorderSizePixel = 0
    searchBox.Parent = playerListFrame
    
    local searchCorner = Instance.new("UICorner")
    searchCorner.CornerRadius = UDim.new(0, 4)
    searchCorner.Parent = searchBox
    
    local playerList = Instance.new("ScrollingFrame")
    playerList.Size = UDim2.new(1, -10, 0, 115)
    playerList.Position = UDim2.new(0, 5, 0, 30)
    playerList.BackgroundTransparency = 1
    playerList.ScrollBarThickness = 4
    playerList.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
    playerList.Parent = playerListFrame
    
    local listLayout = Instance.new("UIListLayout")
    listLayout.Padding = UDim.new(0, 2)
    listLayout.Parent = playerList
    
    local selectedPlayerLabel = Instance.new("TextLabel")
    selectedPlayerLabel.Size = UDim2.new(1, -20, 0, 25)
    selectedPlayerLabel.Position = UDim2.new(0, 0, 0, 160)
    selectedPlayerLabel.BackgroundTransparency = 1
    selectedPlayerLabel.Text = "Selected: None"
    selectedPlayerLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    selectedPlayerLabel.TextScaled = true
    selectedPlayerLabel.Font = Enum.Font.Gotham
    selectedPlayerLabel.TextXAlignment = Enum.TextXAlignment.Left
    selectedPlayerLabel.Parent = frame
    
    local function updatePlayerList(filter)
        for _, child in ipairs(playerList:GetChildren()) do
            if child:IsA("TextButton") then
                child:Destroy()
            end
        end
        
        local players = getAllPlayers()
        local filteredPlayers = {}
        
        for _, player in ipairs(players) do
            if not filter or string.find(player.Name:lower(), filter:lower()) then
                table.insert(filteredPlayers, player)
            end
        end
        
        for _, player in ipairs(filteredPlayers) do
            local playerBtn = Instance.new("TextButton")
            playerBtn.Size = UDim2.new(1, 0, 0, 20)
            playerBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            playerBtn.Text = player.Name
            playerBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
            playerBtn.TextScaled = true
            playerBtn.Font = Enum.Font.Gotham
            playerBtn.BorderSizePixel = 0
            playerBtn.Parent = playerList
            
            local btnCorner = Instance.new("UICorner")
            btnCorner.CornerRadius = UDim.new(0, 2)
            btnCorner.Parent = playerBtn
            
            playerBtn.MouseButton1Click:Connect(function()
                settings.selectedPlayer = player
                selectedPlayerLabel.Text = "Selected: " .. player.Name
                
                -- Update button colors
                for _, btn in ipairs(playerList:GetChildren()) do
                    if btn:IsA("TextButton") then
                        btn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                    end
                end
                playerBtn.BackgroundColor3 = Color3.fromRGB(0, 162, 255)
            end)
        end
        
        playerList.CanvasSize = UDim2.new(0, 0, 0, #filteredPlayers * 22)
    end
    
    searchBox.Changed:Connect(function(property)
        if property == "Text" then
            if searchBox.Text == "" or searchBox.Text == "Search players..." then
                updatePlayerList()
            else
                updatePlayerList(searchBox.Text)
            end
        end
    end)
    
    searchBox.FocusGained:Connect(function()
        if searchBox.Text == "Search players..." then
            searchBox.Text = ""
        end
    end)
    
    searchBox.FocusLost:Connect(function()
        if searchBox.Text == "" then
            searchBox.Text = "Search players..."
        end
    end)
    
    local viewBtn = createButton(frame, "View: OFF", nil)
    
    local function updateViewButton(viewing)
        if viewing then
            viewBtn.Text = "View: ON"
            viewBtn.BackgroundColor3 = Color3.fromRGB(0, 200, 0)
        else
            viewBtn.Text = "View: OFF"
            viewBtn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        end
    end
    
    viewBtn.MouseButton1Click:Connect(function()
        if settings.selectedPlayer then
            local viewing = viewPlayer(settings.selectedPlayer)
            print("View toggled:", viewing) -- Debug
            updateViewButton(viewing)
        end
    end)
    viewBtn.Position = UDim2.new(0, 0, 0, 225)
    
    local gotoBtn = createButton(frame, "Goto Player", nil)
    gotoBtn.Position = UDim2.new(0, 210, 0, 225)
    
    gotoBtn.MouseButton1Click:Connect(function()
        if settings.selectedPlayer then
            teleportToPlayer(settings.selectedPlayer)
            print("Teleported to:", settings.selectedPlayer.Name) -- Debug
        else
            print("No player selected!") -- Debug
        end
    end)
    
    updatePlayerList()
    
    -- Update player list when players join/leave
    Players.PlayerAdded:Connect(function()
        wait(0.1)
        updatePlayerList(searchBox.Text ~= "Search players..." and searchBox.Text or nil)
    end)
    
    Players.PlayerRemoving:Connect(function(player)
        if settings.selectedPlayer == player then
            settings.selectedPlayer = nil
            selectedPlayerLabel.Text = "Selected: None"
        end
        updatePlayerList(searchBox.Text ~= "Search players..." and searchBox.Text or nil)
    end)
    
    frame.CanvasSize = UDim2.new(0, 0, 0, 250)
end

local function createESPFrame()
    local frame = createCategoryFrame("ESP")
    
    local espBtn = createButton(frame, "ESP Highlight: OFF", nil)
    
    local function updateESPButton()
        if settings.espEnabled then
            espBtn.Text = "ESP Highlight: ON"
            espBtn.BackgroundColor3 = Color3.fromRGB(0, 200, 0)
        else
            espBtn.Text = "ESP Highlight: OFF"
            espBtn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        end
        updateESP()
    end
    
    espBtn.MouseButton1Click:Connect(function()
        settings.espEnabled = not settings.espEnabled
        print("ESP toggled:", settings.espEnabled) -- Debug
        updateESPButton()
    end)
    
    updateESPButton()
    
    createColorPicker(frame, "Highlight Color", settings.espColor, function(color)
        settings.espColor = color
        for player, objects in pairs(espObjects) do
            if objects.highlight then
                objects.highlight.FillColor = color
                objects.highlight.OutlineColor = color
            end
        end
    end)
    
    createSlider(frame, "Highlight Transparency", 0, 1, settings.espTransparency, function(value)
        settings.espTransparency = value
        for player, objects in pairs(espObjects) do
            if objects.highlight then
                objects.highlight.FillTransparency = value
            end
        end
    end)
    
    local nametagBtn = createButton(frame, "Nametags: OFF", nil)
    
    local function updateNametagButton()
        if settings.nametagsEnabled then
            nametagBtn.Text = "Nametags: ON"
            nametagBtn.BackgroundColor3 = Color3.fromRGB(0, 200, 0)
        else
            nametagBtn.Text = "Nametags: OFF"
            nametagBtn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        end
        updateNametags()
    end
    
    nametagBtn.MouseButton1Click:Connect(function()
        settings.nametagsEnabled = not settings.nametagsEnabled
        print("Nametags toggled:", settings.nametagsEnabled) -- Debug
        updateNametagButton()
    end)
    
    updateNametagButton()
    
    createColorPicker(frame, "Nametag Color", settings.nametagColor, function(color)
        settings.nametagColor = color
        for player, objects in pairs(nametagObjects) do
            if objects.gui and objects.gui:FindFirstChild("TextLabel") then
                objects.gui.TextLabel.TextColor3 = color
            end
        end
    end)
    
    createSlider(frame, "Nametag Size", 1, 50, settings.nametagSize, function(value)
        settings.nametagSize = value
        for player, objects in pairs(nametagObjects) do
            if objects.gui then
                local camera = Workspace.CurrentCamera
                local humanoidRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                if camera and humanoidRootPart then
                    local distance = (camera.CFrame.Position - humanoidRootPart.Position).Magnitude
                    local scale = math.max(0.5, math.min(2, 50 / distance))
                    objects.gui.Size = UDim2.new(0, value * 10 * scale, 0, value * 2 * scale)
                end
            end
        end
    end)
    
    frame.CanvasSize = UDim2.new(0, 0, 0, 400)
end

-- Initialize Categories
local function initializeCategories()
    createCategoryButton("Fly", createFlyFrame)
    createCategoryButton("Me", createMeFrame)
    createCategoryButton("Player", createPlayerFrame)
    createCategoryButton("ESP", createESPFrame)
end

-- Event Handlers
local function onCharacterAdded(character)
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.WalkSpeed = settings.walkSpeed
    humanoid.JumpPower = settings.jumpHeight
    
    if settings.flyEnabled then
        wait(1)
        enableFly()
    end
    
    if settings.noclipEnabled then
        enableNoclip()
    end
end

-- Player Events
Players.PlayerAdded:Connect(function(player)
    if settings.espEnabled and player ~= LocalPlayer then
        player.CharacterAdded:Connect(function()
            wait(0.5)
            createHighlight(player)
        end)
    end
    
    if settings.nametagsEnabled and player ~= LocalPlayer then
        player.CharacterAdded:Connect(function()
            wait(0.5)
            createNametag(player)
        end)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    removeHighlight(player)
    removeNametag(player)
end)

-- Character Respawn
if LocalPlayer.Character then
    onCharacterAdded(LocalPlayer.Character)
end

LocalPlayer.CharacterAdded:Connect(onCharacterAdded)

-- Menu Toggle
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == settings.menuKey then
        if VyrxisGui then
            VyrxisGui.Enabled = not VyrxisGui.Enabled
        end
    end
end)

-- Cleanup on disconnect
game.Players.PlayerRemoving:Connect(function(player)
    if player == LocalPlayer then
        disableFly()
        disableNoclip()
        for p, highlight in pairs(espObjects) do
            highlight:Destroy()
        end
        for p, nametag in pairs(nametagObjects) do
            nametag:Destroy()
        end
    end
end)

-- Initialize
spawn(function()
    createLoadScreen()
    wait(5.5)
    createMainUI()
    createSettingsFrame()
    initializeCategories()
end)
