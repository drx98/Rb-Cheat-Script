-- Vyrxis Menu Script
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")
local StarterGui = game:GetService("StarterGui")

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Variablen
local VyrxisGui
local MainFrame
local MainRahmen
local SettingsFrame
local LoadScreen
local currentCategory = nil
local menuToggleKey = Enum.KeyCode.Insert
local flyEnabled = false
local flySpeed = 50
local noclipEnabled = false
local espEnabled = false
local nametagsEnabled = false
local viewEnabled = false
local selectedPlayer = nil

-- Funktionen
local flying = false
local originalWalkSpeed
local originalJumpHeight
local bodyVelocity
local bodyAngularVelocity

-- GUI erstellen
local function createGui()
    if VyrxisGui then VyrxisGui:Destroy() end
    
    VyrxisGui = Instance.new("ScreenGui")
    VyrxisGui.Name = "VyrxisGui"
    VyrxisGui.Parent = PlayerGui
    VyrxisGui.ResetOnSpawn = false
end

-- Load Screen erstellen
local function createLoadScreen()
    LoadScreen = Instance.new("Frame")
    LoadScreen.Name = "LoadScreen"
    LoadScreen.Parent = VyrxisGui
    LoadScreen.BackgroundColor3 = Color3.fromRGB(15, 15, 25)
    LoadScreen.BorderSizePixel = 0
    LoadScreen.Position = UDim2.new(0.5, -150, 0.5, -75)
    LoadScreen.Size = UDim2.new(0, 300, 0, 150)
    
    -- Rahmen mit türkisen Effekten
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 12)
    corner.Parent = LoadScreen
    
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 206, 209)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(64, 224, 208))
    }
    gradient.Parent = LoadScreen
    
    -- Titel
    local title = Instance.new("TextLabel")
    title.Parent = LoadScreen
    title.BackgroundTransparency = 1
    title.Position = UDim2.new(0, 0, 0.3, 0)
    title.Size = UDim2.new(1, 0, 0.4, 0)
    title.Font = Enum.Font.GothamBold
    title.Text = "Vyrxis Menu Starting..."
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.TextScaled = true
    
    -- Ladebalken
    local progressBG = Instance.new("Frame")
    progressBG.Parent = LoadScreen
    progressBG.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
    progressBG.BorderSizePixel = 0
    progressBG.Position = UDim2.new(0.1, 0, 0.75, 0)
    progressBG.Size = UDim2.new(0.8, 0, 0.1, 0)
    
    local progressCorner = Instance.new("UICorner")
    progressCorner.CornerRadius = UDim.new(0, 6)
    progressCorner.Parent = progressBG
    
    local progressBar = Instance.new("Frame")
    progressBar.Parent = progressBG
    progressBar.BackgroundColor3 = Color3.fromRGB(0, 206, 209)
    progressBar.BorderSizePixel = 0
    progressBar.Position = UDim2.new(0, 0, 0, 0)
    progressBar.Size = UDim2.new(0, 0, 1, 0)
    
    local barCorner = Instance.new("UICorner")
    barCorner.CornerRadius = UDim.new(0, 6)
    barCorner.Parent = progressBar
    
    -- Animation
    local tween = TweenService:Create(progressBar, TweenInfo.new(5, Enum.EasingStyle.Linear), {Size = UDim2.new(1, 0, 1, 0)})
    tween:Play()
    
    -- Türkise Rand-Effekte
    for i = 1, 20 do
        local effect = Instance.new("Frame")
        effect.Parent = VyrxisGui
        effect.BackgroundColor3 = Color3.fromRGB(0, 206, 209)
        effect.BorderSizePixel = 0
        effect.Size = UDim2.new(0, math.random(2, 6), 0, math.random(10, 30))
        effect.Position = UDim2.new(math.random(0, 100)/100, 0, math.random(0, 100)/100, 0)
        
        local effectCorner = Instance.new("UICorner")
        effectCorner.CornerRadius = UDim.new(0, 3)
        effectCorner.Parent = effect
        
        -- Animiere Effekte
        local effectTween = TweenService:Create(effect, TweenInfo.new(5, Enum.EasingStyle.Linear), {BackgroundTransparency = 1})
        effectTween:Play()
        
        spawn(function()
            wait(5)
            effect:Destroy()
        end)
    end
    
    -- Nach 5 Sekunden entfernen
    spawn(function()
        wait(5)
        pcall(function()
            local fadeOut = TweenService:Create(LoadScreen, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {BackgroundTransparency = 1})
            fadeOut:Play()
            TweenService:Create(title, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {TextTransparency = 1}):Play()
            wait(0.5)
            LoadScreen:Destroy()
        end)
        createMainMenu()
    end)
end

-- Haupt-Menü erstellen
local function createMainMenu()
    print("Creating main menu...") -- Debug
    
    -- MainRahmen (Titelleiste)
    MainRahmen = Instance.new("Frame")
    MainRahmen.Name = "MainRahmen"
    MainRahmen.Parent = VyrxisGui
    MainRahmen.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
    MainRahmen.BorderSizePixel = 0
    MainRahmen.Position = UDim2.new(0.5, -300, 0.5, -225)
    MainRahmen.Size = UDim2.new(0, 600, 0, 30)
    MainRahmen.Active = true
    MainRahmen.Draggable = false
    MainRahmen.Visible = true
    MainRahmen.ZIndex = 10
    
    local rahmenCorner = Instance.new("UICorner")
    rahmenCorner.CornerRadius = UDim.new(0, 8)
    rahmenCorner.Parent = MainRahmen
    
    -- Titel
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Parent = MainRahmen
    titleLabel.BackgroundTransparency = 1
    titleLabel.Position = UDim2.new(0, 15, 0, 0)
    titleLabel.Size = UDim2.new(0, 200, 1, 0)
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Text = "Vyrxis Menu"
    titleLabel.TextColor3 = Color3.fromRGB(0, 206, 209)
    titleLabel.TextSize = 14
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.ZIndex = 11
    
    -- Minimize Button
    local minimizeBtn = Instance.new("TextButton")
    minimizeBtn.Parent = MainRahmen
    minimizeBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
    minimizeBtn.BorderSizePixel = 0
    minimizeBtn.Position = UDim2.new(1, -60, 0.1, 0)
    minimizeBtn.Size = UDim2.new(0, 25, 0.8, 0)
    minimizeBtn.Font = Enum.Font.GothamBold
    minimizeBtn.Text = "-"
    minimizeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    minimizeBtn.TextSize = 16
    minimizeBtn.ZIndex = 11
    
    local minCorner = Instance.new("UICorner")
    minCorner.CornerRadius = UDim.new(0, 4)
    minCorner.Parent = minimizeBtn
    
    -- Settings Button
    local settingsBtn = Instance.new("TextButton")
    settingsBtn.Parent = MainRahmen
    settingsBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
    settingsBtn.BorderSizePixel = 0
    settingsBtn.Position = UDim2.new(1, -30, 0.1, 0)
    settingsBtn.Size = UDim2.new(0, 25, 0.8, 0)
    settingsBtn.Font = Enum.Font.GothamBold
    settingsBtn.Text = "⚙"
    settingsBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    settingsBtn.TextSize = 12
    settingsBtn.ZIndex = 11
    
    local setCorner = Instance.new("UICorner")
    setCorner.CornerRadius = UDim.new(0, 4)
    setCorner.Parent = settingsBtn
    
    -- MainFrame
    MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Parent = VyrxisGui
    MainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
    MainFrame.BorderSizePixel = 0
    MainFrame.Position = UDim2.new(0.5, -300, 0.5, -195)
    MainFrame.Size = UDim2.new(0, 600, 0, 390)
    MainFrame.Visible = true
    MainFrame.ZIndex = 10
    
    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, 8)
    mainCorner.Parent = MainFrame
    
    -- Kategorie-Liste
    local Liste = Instance.new("ScrollingFrame")
    Liste.Name = "Liste"
    Liste.Parent = MainFrame
    Liste.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
    Liste.BorderSizePixel = 0
    Liste.Position = UDim2.new(0, 10, 0, 10)
    Liste.Size = UDim2.new(0, 140, 1, -20)
    Liste.ScrollBarThickness = 6
    Liste.ScrollBarImageColor3 = Color3.fromRGB(0, 206, 209)
    Liste.ZIndex = 11
    Liste.CanvasSize = UDim2.new(0, 0, 0, 0)
    
    local listeCorner = Instance.new("UICorner")
    listeCorner.CornerRadius = UDim.new(0, 6)
    listeCorner.Parent = Liste
    
    local listLayout = Instance.new("UIListLayout")
    listLayout.Parent = Liste
    listLayout.Padding = UDim.new(0, 5)
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    
    -- Kategorien
    local categories = {"Fly", "Me", "Player", "ESP"}
    for i, category in pairs(categories) do
        local categoryBtn = Instance.new("TextButton")
        categoryBtn.Parent = Liste
        categoryBtn.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
        categoryBtn.BorderSizePixel = 0
        categoryBtn.Size = UDim2.new(1, -10, 0, 40)
        categoryBtn.Font = Enum.Font.Gotham
        categoryBtn.Text = category
        categoryBtn.TextColor3 = Color3.fromRGB(200, 200, 200)
        categoryBtn.TextSize = 14
        categoryBtn.LayoutOrder = i
        categoryBtn.ZIndex = 12
        
        local catCorner = Instance.new("UICorner")
        catCorner.CornerRadius = UDim.new(0, 4)
        catCorner.Parent = categoryBtn
        
        categoryBtn.MouseButton1Click:Connect(function()
            print("Category button clicked: " .. category) -- Debug
            openCategory(category)
        end)
    end
    
    -- Canvas Size für Liste aktualisieren
    listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        Liste.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y + 10)
    end)
    Liste.CanvasSize = UDim2.new(0, 0, 0, (#categories * 45))
    
    -- Event-Handler
    minimizeBtn.MouseButton1Click:Connect(function()
        print("Minimize button clicked") -- Debug
        MainFrame.Visible = not MainFrame.Visible
    end)
    
    settingsBtn.MouseButton1Click:Connect(function()
        print("Settings button clicked") -- Debug
        openSettings()
    end)
    
    -- Dragging System
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    MainRahmen.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = MainRahmen.Position
            print("Started dragging") -- Debug
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            local newPos = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            MainRahmen.Position = newPos
            MainFrame.Position = UDim2.new(newPos.X.Scale, newPos.X.Offset, newPos.Y.Scale, newPos.Y.Offset + 30)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            if dragging then
                print("Stopped dragging") -- Debug
            end
            dragging = false
        end
    end)
    
    print("Main menu created successfully!") -- Debug
    
    -- Öffne standardmäßig die Fly-Kategorie
    spawn(function()
        wait(0.1)
        openCategory("Fly")
    end)
end

-- Settings öffnen
function openSettings()
    if SettingsFrame then SettingsFrame:Destroy() end
    
    SettingsFrame = Instance.new("Frame")
    SettingsFrame.Name = "SettingsFrame"
    SettingsFrame.Parent = VyrxisGui
    SettingsFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
    SettingsFrame.BorderSizePixel = 0
    SettingsFrame.Position = UDim2.new(0.5, -150, 0.5, -100)
    SettingsFrame.Size = UDim2.new(0, 300, 0, 200)
    
    local settingsCorner = Instance.new("UICorner")
    settingsCorner.CornerRadius = UDim.new(0, 8)
    settingsCorner.Parent = SettingsFrame
    
    -- Close Button
    local closeBtn = Instance.new("TextButton")
    closeBtn.Parent = SettingsFrame
    closeBtn.BackgroundColor3 = Color3.fromRGB(220, 50, 50)
    closeBtn.BorderSizePixel = 0
    closeBtn.Position = UDim2.new(1, -25, 0, 5)
    closeBtn.Size = UDim2.new(0, 20, 0, 20)
    closeBtn.Font = Enum.Font.GothamBold
    closeBtn.Text = "X"
    closeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeBtn.TextScaled = true
    
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 4)
    closeCorner.Parent = closeBtn
    
    closeBtn.MouseButton1Click:Connect(function()
        SettingsFrame:Destroy()
    end)
    
    -- Toggle Key Setting
    local keyLabel = Instance.new("TextLabel")
    keyLabel.Parent = SettingsFrame
    keyLabel.BackgroundTransparency = 1
    keyLabel.Position = UDim2.new(0, 20, 0, 40)
    keyLabel.Size = UDim2.new(1, -40, 0, 30)
    keyLabel.Font = Enum.Font.Gotham
    keyLabel.Text = "Toggle Key: " .. tostring(menuToggleKey):gsub("Enum.KeyCode.", "")
    keyLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    keyLabel.TextScaled = true
    keyLabel.TextXAlignment = Enum.TextXAlignment.Left
    
    local keyBtn = Instance.new("TextButton")
    keyBtn.Parent = SettingsFrame
    keyBtn.BackgroundColor3 = Color3.fromRGB(0, 206, 209)
    keyBtn.BorderSizePixel = 0
    keyBtn.Position = UDim2.new(0, 20, 0, 80)
    keyBtn.Size = UDim2.new(1, -40, 0, 40)
    keyBtn.Font = Enum.Font.Gotham
    keyBtn.Text = "Klicken um Taste zu ändern"
    keyBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    keyBtn.TextScaled = true
    
    local keyCorner = Instance.new("UICorner")
    keyCorner.CornerRadius = UDim.new(0, 6)
    keyCorner.Parent = keyBtn
    
    keyBtn.MouseButton1Click:Connect(function()
        keyBtn.Text = "Drücke eine Taste..."
        local connection
        connection = UserInputService.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Keyboard then
                menuToggleKey = input.KeyCode
                keyLabel.Text = "Toggle Key: " .. tostring(menuToggleKey):gsub("Enum.KeyCode.", "")
                keyBtn.Text = "Taste geändert!"
                wait(1)
                keyBtn.Text = "Klicken um Taste zu ändern"
                connection:Disconnect()
            end
        end)
    end)
end

-- Kategorie öffnen
function openCategory(categoryName)
    print("Opening category: " .. categoryName) -- Debug
    
    -- Entferne vorherige Kategorie-Frames
    for _, child in pairs(MainFrame:GetChildren()) do
        if child.Name:find("CategoryFrame") then
            child:Destroy()
        end
    end
    
    local categoryFrame = Instance.new("ScrollingFrame")
    categoryFrame.Name = categoryName .. "CategoryFrame"
    categoryFrame.Parent = MainFrame
    categoryFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
    categoryFrame.BorderSizePixel = 0
    categoryFrame.Position = UDim2.new(0, 160, 0, 10)
    categoryFrame.Size = UDim2.new(0, 430, 1, -20)
    categoryFrame.ScrollBarThickness = 6
    categoryFrame.ScrollBarImageColor3 = Color3.fromRGB(0, 206, 209)
    categoryFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    
    local catFrameCorner = Instance.new("UICorner")
    catFrameCorner.CornerRadius = UDim.new(0, 6)
    catFrameCorner.Parent = categoryFrame
    
    local layout = Instance.new("UIListLayout")
    layout.Parent = categoryFrame
    layout.Padding = UDim.new(0, 10)
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    
    -- Canvas Size automatisch anpassen
    layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        categoryFrame.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 20)
    end)
    
    if categoryName == "Fly" then
        createFlyCategory(categoryFrame)
    elseif categoryName == "Me" then
        createMeCategory(categoryFrame)
    elseif categoryName == "Player" then
        createPlayerCategory(categoryFrame)
    elseif categoryName == "ESP" then
        createESPCategory(categoryFrame)
    end
    
    print("Category frame created successfully") -- Debug
end

-- Fly Kategorie
function createFlyCategory(parent)
    -- Fly Toggle
    local flyToggle = createToggleButton(parent, "Fly", false, function(enabled)
        flyEnabled = enabled
        if enabled then
            startFlying()
        else
            stopFlying()
        end
    end)
    
    -- Speed Slider
    createSlider(parent, "Fly Speed", 10, 200, flySpeed, function(value)
        flySpeed = value
    end)
end

-- Me Kategorie
function createMeCategory(parent)
    -- Give All Items Button
    local giveItemsBtn = createButton(parent, "Give All Items", function()
        giveAllItems()
    end)
    
    -- WalkSpeed Slider
    createSlider(parent, "Walk Speed", 16, 200, 16, function(value)
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.WalkSpeed = value
        end
    end)
    
    -- JumpHeight Slider
    createSlider(parent, "Jump Height", 7.2, 200, 7.2, function(value)
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.JumpHeight = value
        end
    end)
    
    -- Noclip Toggle
    createToggleButton(parent, "Noclip", false, function(enabled)
        noclipEnabled = enabled
        toggleNoclip(enabled)
    end)
end

-- Player Kategorie
function createPlayerCategory(parent)
    local playerListFrame = Instance.new("Frame")
    playerListFrame.Parent = parent
    playerListFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
    playerListFrame.BorderSizePixel = 0
    playerListFrame.Size = UDim2.new(1, -20, 0, 200)
    playerListFrame.Visible = false
    
    local playerCorner = Instance.new("UICorner")
    playerCorner.CornerRadius = UDim.new(0, 6)
    playerCorner.Parent = playerListFrame
    
    -- Player List Toggle
    local togglePlayerList = createToggleButton(parent, "Player List", false, function(enabled)
        playerListFrame.Visible = enabled
        if enabled then
            updatePlayerList(playerListFrame)
        end
    end)
    
    -- Search Box
    local searchBox = Instance.new("TextBox")
    searchBox.Parent = playerListFrame
    searchBox.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
    searchBox.BorderSizePixel = 0
    searchBox.Position = UDim2.new(0, 10, 0, 10)
    searchBox.Size = UDim2.new(1, -20, 0, 30)
    searchBox.Font = Enum.Font.Gotham
    searchBox.PlaceholderText = "Spielername suchen..."
    searchBox.Text = ""
    searchBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    searchBox.TextScaled = true
    
    -- Player Scroll
    local playerScroll = Instance.new("ScrollingFrame")
    playerScroll.Parent = playerListFrame
    playerScroll.BackgroundColor3 = Color3.fromRGB(35, 35, 45)
    playerScroll.BorderSizePixel = 0
    playerScroll.Position = UDim2.new(0, 10, 0, 50)
    playerScroll.Size = UDim2.new(1, -20, 1, -60)
    playerScroll.ScrollBarThickness = 4
    
    local playerLayout = Instance.new("UIListLayout")
    playerLayout.Parent = playerScroll
    playerLayout.Padding = UDim.new(0, 2)
    
    -- View und Goto Buttons
    createToggleButton(parent, "View Player", false, function(enabled)
        viewEnabled = enabled
        if enabled and selectedPlayer then
            viewPlayer(selectedPlayer)
        else
            viewPlayer(LocalPlayer)
        end
    end)
    
    createButton(parent, "Goto Player", function()
        if selectedPlayer then
            gotoPlayer(selectedPlayer)
        end
    end)
end

-- ESP Kategorie
function createESPCategory(parent)
    -- ESP Highlight Toggle
    createToggleButton(parent, "ESP Highlight", false, function(enabled)
        espEnabled = enabled
        toggleESP(enabled)
    end)
    
    -- Color Picker für ESP
    createColorPicker(parent, "ESP Color", Color3.fromRGB(255, 0, 0), function(color)
        updateESPColor(color)
    end)
    
    -- Transparency Slider
    createSlider(parent, "ESP Transparency", 0, 1, 0.5, function(value)
        updateESPTransparency(value)
    end)
    
    -- Nametags Toggle
    createToggleButton(parent, "Nametags", false, function(enabled)
        nametagsEnabled = enabled
        toggleNametags(enabled)
    end)
    
    -- Nametag Color
    createColorPicker(parent, "Nametag Color", Color3.fromRGB(255, 255, 255), function(color)
        updateNametagColor(color)
    end)
    
    -- Nametag Size
    createSlider(parent, "Nametag Size", 8, 24, 14, function(value)
        updateNametagSize(value)
    end)
end

-- UI Helper Funktionen
function createToggleButton(parent, text, defaultState, callback)
    local toggleFrame = Instance.new("Frame")
    toggleFrame.Parent = parent
    toggleFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
    toggleFrame.BorderSizePixel = 0
    toggleFrame.Size = UDim2.new(1, -20, 0, 40)
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 6)
    toggleCorner.Parent = toggleFrame
    
    local label = Instance.new("TextLabel")
    label.Parent = toggleFrame
    label.BackgroundTransparency = 1
    label.Position = UDim2.new(0, 10, 0, 0)
    label.Size = UDim2.new(0.7, 0, 1, 0)
    label.Font = Enum.Font.Gotham
    label.Text = text
    label.TextColor3 = Color3.fromRGB(200, 200, 200)
    label.TextScaled = true
    label.TextXAlignment = Enum.TextXAlignment.Left
    
    local toggleBtn = Instance.new("TextButton")
    toggleBtn.Parent = toggleFrame
    toggleBtn.BackgroundColor3 = defaultState and Color3.fromRGB(0, 206, 209) or Color3.fromRGB(80, 80, 90)
    toggleBtn.BorderSizePixel = 0
    toggleBtn.Position = UDim2.new(0.8, 0, 0.1, 0)
    toggleBtn.Size = UDim2.new(0.15, 0, 0.8, 0)
    toggleBtn.Font = Enum.Font.GothamBold
    toggleBtn.Text = defaultState and "ON" or "OFF"
    toggleBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleBtn.TextScaled = true
    
    local btnCorner = Instance.new("UICorner")
    btnCorner.CornerRadius = UDim.new(0, 4)
    btnCorner.Parent = toggleBtn
    
    local state = defaultState
    toggleBtn.MouseButton1Click:Connect(function()
        state = not state
        toggleBtn.BackgroundColor3 = state and Color3.fromRGB(0, 206, 209) or Color3.fromRGB(80, 80, 90)
        toggleBtn.Text = state and "ON" or "OFF"
        callback(state)
    end)
    
    return toggleBtn
end

function createButton(parent, text, callback)
    local btn = Instance.new("TextButton")
    btn.Parent = parent
    btn.BackgroundColor3 = Color3.fromRGB(0, 206, 209)
    btn.BorderSizePixel = 0
    btn.Size = UDim2.new(1, -20, 0, 40)
    btn.Font = Enum.Font.Gotham
    btn.Text = text
    btn.TextColor3 = Color3.fromRGB(255, 255, 255)
    btn.TextScaled = true
    
    local btnCorner = Instance.new("UICorner")
    btnCorner.CornerRadius = UDim.new(0, 6)
    btnCorner.Parent = btn
    
    btn.MouseButton1Click:Connect(callback)
    
    return btn
end

function createSlider(parent, text, min, max, default, callback)
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Parent = parent
    sliderFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
    sliderFrame.BorderSizePixel = 0
    sliderFrame.Size = UDim2.new(1, -20, 0, 60)
    
    local sliderCorner = Instance.new("UICorner")
    sliderCorner.CornerRadius = UDim.new(0, 6)
    sliderCorner.Parent = sliderFrame
    
    local label = Instance.new("TextLabel")
    label.Parent = sliderFrame
    label.BackgroundTransparency = 1
    label.Position = UDim2.new(0, 10, 0, 0)
    label.Size = UDim2.new(1, -20, 0, 25)
    label.Font = Enum.Font.Gotham
    label.Text = text .. ": " .. default
    label.TextColor3 = Color3.fromRGB(200, 200, 200)
    label.TextScaled = true
    label.TextXAlignment = Enum.TextXAlignment.Left
    
    local sliderBG = Instance.new("Frame")
    sliderBG.Parent = sliderFrame
    sliderBG.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
    sliderBG.BorderSizePixel = 0
    sliderBG.Position = UDim2.new(0, 10, 0, 30)
    sliderBG.Size = UDim2.new(1, -20, 0, 20)
    
    local sliderBGCorner = Instance.new("UICorner")
    sliderBGCorner.CornerRadius = UDim.new(0, 10)
    sliderBGCorner.Parent = sliderBG
    
    local sliderFill = Instance.new("Frame")
    sliderFill.Parent = sliderBG
    sliderFill.BackgroundColor3 = Color3.fromRGB(0, 206, 209)
    sliderFill.BorderSizePixel = 0
    sliderFill.Position = UDim2.new(0, 0, 0, 0)
    sliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    
    local sliderFillCorner = Instance.new("UICorner")
    sliderFillCorner.CornerRadius = UDim.new(0, 10)
    sliderFillCorner.Parent = sliderFill
    
    local sliderBtn = Instance.new("TextButton")
    sliderBtn.Parent = sliderBG
    sliderBtn.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    sliderBtn.BorderSizePixel = 0
    sliderBtn.Position = UDim2.new((default - min) / (max - min), -8, 0, -4)
    sliderBtn.Size = UDim2.new(0, 16, 0, 28)
    sliderBtn.Text = ""
    
    local sliderBtnCorner = Instance.new("UICorner")
    sliderBtnCorner.CornerRadius = UDim.new(0, 8)
    sliderBtnCorner.Parent = sliderBtn
    
    local dragging = false
    local currentValue = default
    
    sliderBtn.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
    
    sliderBtn.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mouse = LocalPlayer:GetMouse()
            local relativeX = mouse.X - sliderBG.AbsolutePosition.X
            local percentage = math.clamp(relativeX / sliderBG.AbsoluteSize.X, 0, 1)
            currentValue = min + (max - min) * percentage
            
            sliderFill.Size = UDim2.new(percentage, 0, 1, 0)
            sliderBtn.Position = UDim2.new(percentage, -8, 0, -4)
            label.Text = text .. ": " .. math.floor(currentValue)
            
            callback(currentValue)
        end
    end)
end

function createColorPicker(parent, text, defaultColor, callback)
    local colorFrame = Instance.new("Frame")
    colorFrame.Parent = parent
    colorFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
    colorFrame.BorderSizePixel = 0
    colorFrame.Size = UDim2.new(1, -20, 0, 80)
    
    local colorCorner = Instance.new("UICorner")
    colorCorner.CornerRadius = UDim.new(0, 6)
    colorCorner.Parent = colorFrame
    
    local label = Instance.new("TextLabel")
    label.Parent = colorFrame
    label.BackgroundTransparency = 1
    label.Position = UDim2.new(0, 10, 0, 5)
    label.Size = UDim2.new(1, -20, 0, 20)
    label.Font = Enum.Font.Gotham
    label.Text = text
    label.TextColor3 = Color3.fromRGB(200, 200, 200)
    label.TextScaled = true
    label.TextXAlignment = Enum.TextXAlignment.Left
    
    local colorGrid = Instance.new("Frame")
    colorGrid.Parent = colorFrame
    colorGrid.BackgroundTransparency = 1
    colorGrid.Position = UDim2.new(0, 10, 0, 30)
    colorGrid.Size = UDim2.new(1, -20, 0, 40)
    
    local gridLayout = Instance.new("UIGridLayout")
    gridLayout.Parent = colorGrid
    gridLayout.CellPadding = UDim2.new(0, 2, 0, 2)
    gridLayout.CellSize = UDim2.new(0, 18, 0, 18)
    gridLayout.SortOrder = Enum.SortOrder.LayoutOrder
    
    local colors = {
        Color3.fromRGB(255, 0, 0), Color3.fromRGB(0, 255, 0), Color3.fromRGB(0, 0, 255),
        Color3.fromRGB(255, 255, 0), Color3.fromRGB(255, 0, 255), Color3.fromRGB(0, 255, 255),
        Color3.fromRGB(255, 165, 0), Color3.fromRGB(128, 0, 128), Color3.fromRGB(255, 192, 203),
        Color3.fromRGB(0, 0, 0), Color3.fromRGB(255, 255, 255), Color3.fromRGB(128, 128, 128)
    }
    
    for i, color in pairs(colors) do
        local colorBtn = Instance.new("TextButton")
        colorBtn.Parent = colorGrid
        colorBtn.BackgroundColor3 = color
        colorBtn.BorderSizePixel = 0
        colorBtn.Text = ""
        colorBtn.LayoutOrder = i
        
        local colorBtnCorner = Instance.new("UICorner")
        colorBtnCorner.CornerRadius = UDim.new(0, 4)
        colorBtnCorner.Parent = colorBtn
        
        colorBtn.MouseButton1Click:Connect(function()
            callback(color)
        end)
    end
end

-- Funktionalitäts-Funktionen

function startFlying()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
        local rootPart = LocalPlayer.Character.HumanoidRootPart
        
        bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.MaxForce = Vector3.new(4000, 4000, 4000)
        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
        bodyVelocity.Parent = rootPart
        
        bodyAngularVelocity = Instance.new("BodyAngularVelocity")
        bodyAngularVelocity.MaxTorque = Vector3.new(4000, 4000, 4000)
        bodyAngularVelocity.AngularVelocity = Vector3.new(0, 0, 0)
        bodyAngularVelocity.Parent = rootPart
        
        flying = true
        
        spawn(function()
            while flying and flyEnabled do
                local camera = Workspace.CurrentCamera
                local moveVector = Vector3.new(0, 0, 0)
                
                if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                    moveVector = moveVector + camera.CFrame.LookVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                    moveVector = moveVector - camera.CFrame.LookVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                    moveVector = moveVector - camera.CFrame.RightVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                    moveVector = moveVector + camera.CFrame.RightVector
                end
                
                bodyVelocity.Velocity = moveVector * flySpeed
                wait()
            end
        end)
    end
end

function stopFlying()
    flying = false
    if bodyVelocity then
        bodyVelocity:Destroy()
        bodyVelocity = nil
    end
    if bodyAngularVelocity then
        bodyAngularVelocity:Destroy()
        bodyAngularVelocity = nil
    end
end

function giveAllItems()
    spawn(function()
        for _, tool in pairs(game:GetService("ReplicatedStorage"):GetDescendants()) do
            if tool:IsA("Tool") then
                local clonedTool = tool:Clone()
                clonedTool.Parent = LocalPlayer.Backpack
            end
        end
        
        for _, tool in pairs(Workspace:GetDescendants()) do
            if tool:IsA("Tool") and tool.Parent ~= LocalPlayer.Character then
                local clonedTool = tool:Clone()
                clonedTool.Parent = LocalPlayer.Backpack
            end
        end
    end)
end

function toggleNoclip(enabled)
    if enabled then
        spawn(function()
            while noclipEnabled do
                if LocalPlayer.Character then
                    for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                        if part:IsA("BasePart") and part.CanCollide then
                            part.CanCollide = false
                        end
                    end
                end
                wait()
            end
        end)
    else
        if LocalPlayer.Character then
            for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
    end
end

function updatePlayerList(parent)
    for _, child in pairs(parent:GetChildren()) do
        if child:IsA("ScrollingFrame") then
            for _, playerBtn in pairs(child:GetChildren()) do
                if playerBtn:IsA("TextButton") then
                    playerBtn:Destroy()
                end
            end
        end
    end
    
    local playerScroll = parent:FindFirstChild("ScrollingFrame")
    if not playerScroll then return end
    
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            local playerBtn = Instance.new("TextButton")
            playerBtn.Parent = playerScroll
            playerBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
            playerBtn.BorderSizePixel = 0
            playerBtn.Size = UDim2.new(1, -10, 0, 25)
            playerBtn.Font = Enum.Font.Gotham
            playerBtn.Text = player.Name
            playerBtn.TextColor3 = Color3.fromRGB(200, 200, 200)
            playerBtn.TextScaled = true
            
            local playerCorner = Instance.new("UICorner")
            playerCorner.CornerRadius = UDim.new(0, 4)
            playerCorner.Parent = playerBtn
            
            playerBtn.MouseButton1Click:Connect(function()
                selectedPlayer = player
                for _, btn in pairs(playerScroll:GetChildren()) do
                    if btn:IsA("TextButton") then
                        btn.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
                    end
                end
                playerBtn.BackgroundColor3 = Color3.fromRGB(0, 206, 209)
            end)
        end
    end
    
    playerScroll.CanvasSize = UDim2.new(0, 0, 0, #Players:GetPlayers() * 27)
end

function viewPlayer(player)
    if player and player.Character and player.Character:FindFirstChild("Head") then
        Workspace.CurrentCamera.CameraSubject = player.Character.Head
    end
end

function gotoPlayer(player)
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        LocalPlayer.Character.HumanoidRootPart.CFrame = player.Character.HumanoidRootPart.CFrame + Vector3.new(0, 5, 0)
    end
end

-- ESP Funktionen
local espObjects = {}
local nametagObjects = {}
local espColor = Color3.fromRGB(255, 0, 0)
local espTransparency = 0.5
local nametagColor = Color3.fromRGB(255, 255, 255)
local nametagSize = 14

function toggleESP(enabled)
    if enabled then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                createESP(player)
            end
        end
        
        Players.PlayerAdded:Connect(function(player)
            if espEnabled then
                createESP(player)
            end
        end)
        
        Players.PlayerRemoving:Connect(function(player)
            if espObjects[player] then
                espObjects[player]:Destroy()
                espObjects[player] = nil
            end
        end)
    else
        for player, esp in pairs(espObjects) do
            esp:Destroy()
        end
        espObjects = {}
    end
end

function createESP(player)
    if not player.Character then return end
    
    local highlight = Instance.new("Highlight")
    highlight.Parent = player.Character
    highlight.FillColor = espColor
    highlight.FillTransparency = espTransparency
    highlight.OutlineColor = espColor
    highlight.OutlineTransparency = 0
    highlight.Adornee = player.Character
    
    -- Health Bar
    local healthBar = Instance.new("BillboardGui")
    healthBar.Parent = player.Character:FindFirstChild("HumanoidRootPart")
    healthBar.Size = UDim2.new(0, 20, 0, 100)
    healthBar.StudsOffset = Vector3.new(2, 0, 0)
    healthBar.AlwaysOnTop = true
    
    local healthBG = Instance.new("Frame")
    healthBG.Parent = healthBar
    healthBG.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    healthBG.BorderSizePixel = 0
    healthBG.Size = UDim2.new(1, 0, 1, 0)
    
    local healthFill = Instance.new("Frame")
    healthFill.Parent = healthBG
    healthFill.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    healthFill.BorderSizePixel = 0
    healthFill.Position = UDim2.new(0, 0, 0, 0)
    healthFill.Size = UDim2.new(1, 0, 1, 0)
    
    local healthCorner = Instance.new("UICorner")
    healthCorner.CornerRadius = UDim.new(0, 2)
    healthCorner.Parent = healthBG
    
    local healthFillCorner = Instance.new("UICorner")
    healthFillCorner.CornerRadius = UDim.new(0, 2)
    healthFillCorner.Parent = healthFill
    
    -- Health update
    spawn(function()
        while player.Character and espEnabled do
            local humanoid = player.Character:FindFirstChild("Humanoid")
            if humanoid then
                local healthPercent = humanoid.Health / humanoid.MaxHealth
                healthFill.Size = UDim2.new(1, 0, healthPercent, 0)
                healthFill.Position = UDim2.new(0, 0, 1 - healthPercent, 0)
                
                -- Farbwechsel basierend auf Gesundheit
                if healthPercent > 0.6 then
                    healthFill.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
                elseif healthPercent > 0.3 then
                    healthFill.BackgroundColor3 = Color3.fromRGB(255, 255, 0)
                else
                    healthFill.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                end
            end
            wait(0.1)
        end
    end)
    
    espObjects[player] = {highlight, healthBar}
    
    player.CharacterRemoving:Connect(function()
        if espObjects[player] then
            for _, obj in pairs(espObjects[player]) do
                obj:Destroy()
            end
            espObjects[player] = nil
        end
    end)
    
    player.CharacterAdded:Connect(function()
        if espEnabled then
            wait(1)
            createESP(player)
        end
    end)
end

function toggleNametags(enabled)
    if enabled then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                createNametag(player)
            end
        end
        
        Players.PlayerAdded:Connect(function(player)
            if nametagsEnabled then
                createNametag(player)
            end
        end)
        
        Players.PlayerRemoving:Connect(function(player)
            if nametagObjects[player] then
                nametagObjects[player]:Destroy()
                nametagObjects[player] = nil
            end
        end)
    else
        for player, nametag in pairs(nametagObjects) do
            nametag:Destroy()
        end
        nametagObjects = {}
    end
end

function createNametag(player)
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end
    
    local nametag = Instance.new("BillboardGui")
    nametag.Parent = player.Character.HumanoidRootPart
    nametag.Size = UDim2.new(0, 100, 0, nametagSize + 10)
    nametag.StudsOffset = Vector3.new(0, -3, 0)
    nametag.AlwaysOnTop = true
    nametag.MaxDistance = math.huge
    
    local nameLabel = Instance.new("TextLabel")
    nameLabel.Parent = nametag
    nameLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    nameLabel.BackgroundTransparency = 0.5
    nameLabel.BorderSizePixel = 0
    nameLabel.Size = UDim2.new(1, 0, 1, 0)
    nameLabel.Font = Enum.Font.GothamBold
    nameLabel.Text = player.Name
    nameLabel.TextColor3 = nametagColor
    nameLabel.TextSize = nametagSize
    nameLabel.TextStrokeTransparency = 0
    nameLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    
    local nameCorner = Instance.new("UICorner")
    nameCorner.CornerRadius = UDim.new(0, 4)
    nameCorner.Parent = nameLabel
    
    nametagObjects[player] = nametag
    
    player.CharacterRemoving:Connect(function()
        if nametagObjects[player] then
            nametagObjects[player]:Destroy()
            nametagObjects[player] = nil
        end
    end)
    
    player.CharacterAdded:Connect(function()
        if nametagsEnabled then
            wait(1)
            createNametag(player)
        end
    end)
end

function updateESPColor(color)
    espColor = color
    for player, espData in pairs(espObjects) do
        if espData[1] then
            espData[1].FillColor = color
            espData[1].OutlineColor = color
        end
    end
end

function updateESPTransparency(transparency)
    espTransparency = transparency
    for player, espData in pairs(espObjects) do
        if espData[1] then
            espData[1].FillTransparency = transparency
        end
    end
end

function updateNametagColor(color)
    nametagColor = color
    for player, nametag in pairs(nametagObjects) do
        local nameLabel = nametag:FindFirstChild("TextLabel")
        if nameLabel then
            nameLabel.TextColor3 = color
        end
    end
end

function updateNametagSize(size)
    nametagSize = size
    for player, nametag in pairs(nametagObjects) do
        local nameLabel = nametag:FindFirstChild("TextLabel")
        if nameLabel then
            nameLabel.TextSize = size
        end
        nametag.Size = UDim2.new(0, 100, 0, size + 10)
    end
end

-- Input Handler
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == menuToggleKey then
        if VyrxisGui then
            MainRahmen.Visible = not MainRahmen.Visible
            if MainFrame then
                MainFrame.Visible = MainRahmen.Visible
            end
        end
    end
end)

-- Character Respawn Handler
LocalPlayer.CharacterAdded:Connect(function()
    wait(1)
    -- Wiederherstellung der Einstellungen nach Respawn
    if noclipEnabled then
        toggleNoclip(true)
    end
    if flyEnabled then
        flying = false
        startFlying()
    end
end)

-- Cleanup bei Disconnect
game.Players.PlayerRemoving:Connect(function(player)
    if espObjects[player] then
        for _, obj in pairs(espObjects[player]) do
            obj:Destroy()
        end
        espObjects[player] = nil
    end
    if nametagObjects[player] then
        nametagObjects[player]:Destroy()
        nametagObjects[player] = nil
    end
end)

-- GUI initialisieren
print("Initializing Vyrxis Menu...")
createGui()
createLoadScreen()
print("Vyrxis Menu initialized successfully!")
