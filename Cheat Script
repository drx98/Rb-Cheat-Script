-- Vyrxis Menu Script für Roblox - KORRIGIERT UND VERBESSERT
-- Alle Services laden
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local Camera = Workspace.CurrentCamera

-- Variablen für Funktionen
local isFlying = false
local flySpeed = 50
local flyBodyVelocity = nil
local flyBodyAngularVelocity = nil
local originalWalkSpeed = 16
local originalJumpHeight = 7.2
local isESPEnabled = false
local isNoclipEnabled = false
local isViewingPlayer = false
local viewingPlayerName = ""
local espColor = Color3.fromRGB(255, 0, 0)
local espTransparency = 0.5
local nametagsEnabled = false
local nametagColor = Color3.fromRGB(255, 255, 255)
local nametagSize = 14
local selectedPlayer = ""
local toggleKey = Enum.KeyCode.Insert
local espHighlights = {}
local nametags = {}
local healthbars = {}
local flyLookDirection = nil -- Speichert die Blickrichtung beim Aktivieren des Fliegens

-- GUI erstellen
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "VyrxisMenu"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = PlayerGui

-- Load Screen erstellen
local LoadScreen = Instance.new("Frame")
LoadScreen.Name = "LoadScreen"
LoadScreen.Size = UDim2.new(0, 500, 0, 300)
LoadScreen.Position = UDim2.new(0.5, -250, 0.5, -150)
LoadScreen.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
LoadScreen.BorderSizePixel = 0
LoadScreen.Parent = ScreenGui

local LoadScreenCorner = Instance.new("UICorner")
LoadScreenCorner.CornerRadius = UDim.new(0, 20)
LoadScreenCorner.Parent = LoadScreen

local LoadGradient = Instance.new("UIGradient")
LoadGradient.Color = ColorSequence.new{
	ColorSequenceKeypoint.new(0, Color3.fromRGB(20, 20, 30)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 10, 15))
}
LoadGradient.Rotation = 45
LoadGradient.Parent = LoadScreen

local LoadStroke = Instance.new("UIStroke")
LoadStroke.Color = Color3.fromRGB(0, 200, 255)
LoadStroke.Thickness = 2
LoadStroke.Transparency = 0.3
LoadStroke.Parent = LoadScreen

local LoadText = Instance.new("TextLabel")
LoadText.Name = "LoadText"
LoadText.Size = UDim2.new(1, -40, 0, 60)
LoadText.Position = UDim2.new(0, 20, 0, 50)
LoadText.BackgroundTransparency = 1
LoadText.Text = "Vyrxis Menu"
LoadText.TextColor3 = Color3.fromRGB(255, 255, 255)
LoadText.TextSize = 36
LoadText.Font = Enum.Font.GothamBold
LoadText.Parent = LoadScreen

local LoadSubText = Instance.new("TextLabel")
LoadSubText.Name = "LoadSubText"
LoadSubText.Size = UDim2.new(1, -40, 0, 30)
LoadSubText.Position = UDim2.new(0, 20, 0, 110)
LoadSubText.BackgroundTransparency = 1
LoadSubText.Text = "Starting..."
LoadSubText.TextColor3 = Color3.fromRGB(180, 180, 180)
LoadSubText.TextSize = 18
LoadSubText.Font = Enum.Font.Gotham
LoadSubText.Parent = LoadScreen

-- Load Bar
local LoadBarBackground = Instance.new("Frame")
LoadBarBackground.Size = UDim2.new(1, -80, 0, 8)
LoadBarBackground.Position = UDim2.new(0, 40, 0, 200)
LoadBarBackground.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
LoadBarBackground.BorderSizePixel = 0
LoadBarBackground.Parent = LoadScreen

local LoadBarCorner = Instance.new("UICorner")
LoadBarCorner.CornerRadius = UDim.new(0, 4)
LoadBarCorner.Parent = LoadBarBackground

local LoadBar = Instance.new("Frame")
LoadBar.Size = UDim2.new(0, 0, 1, 0)
LoadBar.Position = UDim2.new(0, 0, 0, 0)
LoadBar.BackgroundColor3 = Color3.fromRGB(0, 200, 255)
LoadBar.BorderSizePixel = 0
LoadBar.Parent = LoadBarBackground

local LoadBarFillCorner = Instance.new("UICorner")
LoadBarFillCorner.CornerRadius = UDim.new(0, 4)
LoadBarFillCorner.Parent = LoadBar

local LoadBarGradient = Instance.new("UIGradient")
LoadBarGradient.Color = ColorSequence.new{
	ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 150, 255)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 255, 200))
}
LoadBarGradient.Rotation = 0
LoadBarGradient.Parent = LoadBar

-- Bubble-Effekte für Load Screen
local bubbles = {}

local function createBubble(parent, size, position, speed)
	local bubble = Instance.new("Frame")
	bubble.Size = size
	bubble.Position = position
	bubble.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
	bubble.BorderSizePixel = 0
	bubble.BackgroundTransparency = 0.7
	bubble.Parent = parent

	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(1, 0)
	corner.Parent = bubble

	local gradient = Instance.new("UIGradient")
	gradient.Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 255, 255)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 150, 255))
	}
	gradient.Parent = bubble

	local function animateBubble()
		local moveInfo = TweenInfo.new(speed, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true)
		local moveTween = TweenService:Create(bubble, moveInfo, {
			Position = UDim2.new(position.X.Scale, position.X.Offset + math.random(-50, 50), position.Y.Scale, position.Y.Offset + math.random(-30, 30)),
			BackgroundTransparency = math.random(50, 90) / 100
		})
		moveTween:Play()
	end

	animateBubble()
	return bubble
end

-- Erstelle Bubbles
for i = 1, 15 do
	local size = UDim2.new(0, math.random(20, 80), 0, math.random(20, 80))
	local position = UDim2.new(math.random(0, 100) / 100, 0, math.random(0, 100) / 100, 0)
	local speed = math.random(3, 8)
	local bubble = createBubble(ScreenGui, size, position, speed)
	table.insert(bubbles, bubble)
end

-- Load Screen Animation
local loadTween = TweenService:Create(LoadText, TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1), {TextTransparency = 0.3})
loadTween:Play()

-- Main GUI Frames - Verbessertes Design passend zum LoadScreen
local MainRahmen = Instance.new("Frame")
MainRahmen.Name = "MainRahmen"
MainRahmen.Size = UDim2.new(0, 700, 0, 30)
MainRahmen.Position = UDim2.new(0.5, -350, 0.3, -15)
MainRahmen.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
MainRahmen.BorderSizePixel = 0
MainRahmen.Visible = false
MainRahmen.Active = true
MainRahmen.Draggable = true
MainRahmen.Parent = ScreenGui

local RahmenCorner = Instance.new("UICorner")
RahmenCorner.CornerRadius = UDim.new(0, 20)
RahmenCorner.Parent = MainRahmen

-- Gradient für MainRahmen
local RahmenGradient = Instance.new("UIGradient")
RahmenGradient.Color = ColorSequence.new{
	ColorSequenceKeypoint.new(0, Color3.fromRGB(20, 20, 30)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 10, 15))
}
RahmenGradient.Rotation = 45
RahmenGradient.Parent = MainRahmen

-- Stroke für MainRahmen
local RahmenStroke = Instance.new("UIStroke")
RahmenStroke.Color = Color3.fromRGB(0, 200, 255)
RahmenStroke.Thickness = 2
RahmenStroke.Transparency = 0.3
RahmenStroke.Parent = MainRahmen

local TitleLabel = Instance.new("TextLabel")
TitleLabel.Size = UDim2.new(0, 200, 1, 0)
TitleLabel.Position = UDim2.new(0, 15, 0, 0)
TitleLabel.BackgroundTransparency = 1
TitleLabel.Text = "Vyrxis Menu"
TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TitleLabel.TextScaled = true
TitleLabel.Font = Enum.Font.GothamBold
TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
TitleLabel.Parent = MainRahmen

local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Size = UDim2.new(0, 25, 0, 25)
MinimizeButton.Position = UDim2.new(1, -55, 0, 2.5)
MinimizeButton.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
MinimizeButton.Text = "-"
MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.TextScaled = true
MinimizeButton.Font = Enum.Font.GothamBold
MinimizeButton.BorderSizePixel = 0
MinimizeButton.Parent = MainRahmen

local MinimizeCorner = Instance.new("UICorner")
MinimizeCorner.CornerRadius = UDim.new(0, 8)
MinimizeCorner.Parent = MinimizeButton

-- Stroke für Minimize Button
local MinimizeStroke = Instance.new("UIStroke")
MinimizeStroke.Color = Color3.fromRGB(0, 200, 255)
MinimizeStroke.Thickness = 1
MinimizeStroke.Transparency = 0.5
MinimizeStroke.Parent = MinimizeButton

local SettingsButton = Instance.new("TextButton")
SettingsButton.Size = UDim2.new(0, 25, 0, 25)
SettingsButton.Position = UDim2.new(1, -25, 0, 2.5)
SettingsButton.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
SettingsButton.Text = "⚙"
SettingsButton.TextColor3 = Color3.fromRGB(255, 255, 255)
SettingsButton.TextScaled = true
SettingsButton.Font = Enum.Font.GothamBold
SettingsButton.BorderSizePixel = 0
SettingsButton.Parent = MainRahmen

local SettingsCorner = Instance.new("UICorner")
SettingsCorner.CornerRadius = UDim.new(0, 8)
SettingsCorner.Parent = SettingsButton

-- Stroke für Settings Button
local SettingsStroke = Instance.new("UIStroke")
SettingsStroke.Color = Color3.fromRGB(0, 200, 255)
SettingsStroke.Thickness = 1
SettingsStroke.Transparency = 0.5
SettingsStroke.Parent = SettingsButton

local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Size = UDim2.new(0, 700, 0, 400)
MainFrame.Position = UDim2.new(0, 0, 1, 0)
MainFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
MainFrame.BorderSizePixel = 0
MainFrame.Visible = false
MainFrame.Parent = MainRahmen

local MainCorner = Instance.new("UICorner")
MainCorner.CornerRadius = UDim.new(0, 20)
MainCorner.Parent = MainFrame

-- Gradient für MainFrame
local MainGradient = Instance.new("UIGradient")
MainGradient.Color = ColorSequence.new{
	ColorSequenceKeypoint.new(0, Color3.fromRGB(20, 20, 30)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 10, 15))
}
MainGradient.Rotation = 45
MainGradient.Parent = MainFrame

-- Stroke für MainFrame
local MainStroke = Instance.new("UIStroke")
MainStroke.Color = Color3.fromRGB(0, 200, 255)
MainStroke.Thickness = 2
MainStroke.Transparency = 0.3
MainStroke.Parent = MainFrame

-- Settings Frame
local SettingsFrame = Instance.new("Frame")
SettingsFrame.Name = "SettingsFrame"
SettingsFrame.Size = UDim2.new(0, 300, 0, 200)
SettingsFrame.Position = UDim2.new(0.5, -150, 0.5, -100)
SettingsFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
SettingsFrame.BorderSizePixel = 0
SettingsFrame.Visible = false
SettingsFrame.Parent = ScreenGui

local SettingsFrameCorner = Instance.new("UICorner")
SettingsFrameCorner.CornerRadius = UDim.new(0, 8)
SettingsFrameCorner.Parent = SettingsFrame

local CloseSettings = Instance.new("TextButton")
CloseSettings.Size = UDim2.new(0, 20, 0, 20)
CloseSettings.Position = UDim2.new(1, -25, 0, 5)
CloseSettings.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
CloseSettings.Text = "X"
CloseSettings.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseSettings.TextScaled = true
CloseSettings.Font = Enum.Font.GothamBold
CloseSettings.BorderSizePixel = 0
CloseSettings.Parent = SettingsFrame

local CloseCorner = Instance.new("UICorner")
CloseCorner.CornerRadius = UDim.new(0, 4)
CloseCorner.Parent = CloseSettings

-- Keybind Settings
local KeybindLabel = Instance.new("TextLabel")
KeybindLabel.Size = UDim2.new(1, -20, 0, 30)
KeybindLabel.Position = UDim2.new(0, 10, 0, 40)
KeybindLabel.BackgroundTransparency = 1
KeybindLabel.Text = "Toggle Key: " .. toggleKey.Name
KeybindLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
KeybindLabel.TextScaled = true
KeybindLabel.Font = Enum.Font.Gotham
KeybindLabel.TextXAlignment = Enum.TextXAlignment.Left
KeybindLabel.Parent = SettingsFrame

local ChangeKeyButton = Instance.new("TextButton")
ChangeKeyButton.Size = UDim2.new(0, 100, 0, 30)
ChangeKeyButton.Position = UDim2.new(0.5, -50, 0, 80)
ChangeKeyButton.BackgroundColor3 = Color3.fromRGB(60, 60, 65)
ChangeKeyButton.Text = "Change Key"
ChangeKeyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ChangeKeyButton.TextScaled = true
ChangeKeyButton.Font = Enum.Font.Gotham
ChangeKeyButton.BorderSizePixel = 0
ChangeKeyButton.Parent = SettingsFrame

local ChangeKeyCorner = Instance.new("UICorner")
ChangeKeyCorner.CornerRadius = UDim.new(0, 4)
ChangeKeyCorner.Parent = ChangeKeyButton

-- Kategorie Liste - Design Update
local Liste = Instance.new("ScrollingFrame")
Liste.Name = "Liste"
Liste.Size = UDim2.new(0, 150, 1, -10)
Liste.Position = UDim2.new(0, 5, 0, 5)
Liste.BackgroundColor3 = Color3.fromRGB(10, 10, 15)
Liste.BorderSizePixel = 0
Liste.ScrollBarThickness = 5
Liste.Parent = MainFrame

local ListeCorner = Instance.new("UICorner")
ListeCorner.CornerRadius = UDim.new(0, 15)
ListeCorner.Parent = Liste

-- Gradient für Liste
local ListeGradient = Instance.new("UIGradient")
ListeGradient.Color = ColorSequence.new{
	ColorSequenceKeypoint.new(0, Color3.fromRGB(15, 15, 25)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(8, 8, 12))
}
ListeGradient.Rotation = 45
ListeGradient.Parent = Liste

-- Stroke für Liste
local ListeStroke = Instance.new("UIStroke")
ListeStroke.Color = Color3.fromRGB(0, 150, 200)
ListeStroke.Thickness = 1
ListeStroke.Transparency = 0.6
ListeStroke.Parent = Liste

local ListLayout = Instance.new("UIListLayout")
ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
ListLayout.Padding = UDim.new(0, 5)
ListLayout.Parent = Liste

-- Kategorien erstellen
local categories = {"Fly", "Me", "Player", "ESP"}
local categoryFrames = {}

for i, category in pairs(categories) do
	local categoryButton = Instance.new("TextButton")
	categoryButton.Size = UDim2.new(1, -10, 0, 40)
	categoryButton.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
	categoryButton.Text = category
	categoryButton.TextColor3 = Color3.fromRGB(255, 255, 255)
	categoryButton.TextScaled = true
	categoryButton.Font = Enum.Font.GothamBold
	categoryButton.BorderSizePixel = 0
	categoryButton.LayoutOrder = i
	categoryButton.Parent = Liste

	local catCorner = Instance.new("UICorner")
	catCorner.CornerRadius = UDim.new(0, 8)
	catCorner.Parent = categoryButton

	-- Stroke für Category Buttons
	local catStroke = Instance.new("UIStroke")
	catStroke.Color = Color3.fromRGB(0, 200, 255)
	catStroke.Thickness = 1
	catStroke.Transparency = 0.6
	catStroke.Parent = categoryButton

	-- Kategorie Frame erstellen
	local categoryFrame = Instance.new("ScrollingFrame")
	categoryFrame.Name = category .. "Frame"
	categoryFrame.Size = UDim2.new(0, 530, 1, -10)
	categoryFrame.Position = UDim2.new(0, 160, 0, 5)
	categoryFrame.BackgroundColor3 = Color3.fromRGB(10, 10, 15)
	categoryFrame.BorderSizePixel = 0
	categoryFrame.ScrollBarThickness = 5
	categoryFrame.Visible = false
	categoryFrame.Parent = MainFrame

	local catFrameCorner = Instance.new("UICorner")
	catFrameCorner.CornerRadius = UDim.new(0, 15)
	catFrameCorner.Parent = categoryFrame

	-- Gradient für Category Frames
	local catFrameGradient = Instance.new("UIGradient")
	catFrameGradient.Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0, Color3.fromRGB(15, 15, 25)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(8, 8, 12))
	}
	catFrameGradient.Rotation = 45
	catFrameGradient.Parent = categoryFrame

	-- Stroke für Category Frames
	local catFrameStroke = Instance.new("UIStroke")
	catFrameStroke.Color = Color3.fromRGB(0, 150, 200)
	catFrameStroke.Thickness = 1
	catFrameStroke.Transparency = 0.6
	catFrameStroke.Parent = categoryFrame

	local catLayout = Instance.new("UIListLayout")
	catLayout.SortOrder = Enum.SortOrder.LayoutOrder
	catLayout.Padding = UDim.new(0, 10)
	catLayout.Parent = categoryFrame

	categoryFrames[category] = categoryFrame

	categoryButton.MouseButton1Click:Connect(function()
		for name, frame in pairs(categoryFrames) do
			frame.Visible = (name == category)
		end
	end)
end

-- Hilfsfunktionen für GUI-Elemente
local function createButton(parent, text, layoutOrder)
	local button = Instance.new("TextButton")
	button.Size = UDim2.new(1, -20, 0, 40)
	button.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
	button.Text = text
	button.TextColor3 = Color3.fromRGB(255, 255, 255)
	button.TextScaled = true
	button.Font = Enum.Font.GothamBold
	button.BorderSizePixel = 0
	button.LayoutOrder = layoutOrder
	button.Parent = parent

	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, 8)
	corner.Parent = button

	-- Stroke für Buttons
	local stroke = Instance.new("UIStroke")
	stroke.Color = Color3.fromRGB(0, 200, 255)
	stroke.Thickness = 1
	stroke.Transparency = 0.5
	stroke.Parent = button

	return button
end

local function createSlider(parent, text, minVal, maxVal, defaultVal, layoutOrder)
	local frame = Instance.new("Frame")
	frame.Size = UDim2.new(1, -20, 0, 60)
	frame.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
	frame.BorderSizePixel = 0
	frame.LayoutOrder = layoutOrder
	frame.Parent = parent

	local frameCorner = Instance.new("UICorner")
	frameCorner.CornerRadius = UDim.new(0, 8)
	frameCorner.Parent = frame

	-- Gradient für Slider Frame
	local frameGradient = Instance.new("UIGradient")
	frameGradient.Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0, Color3.fromRGB(20, 20, 30)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 10, 15))
	}
	frameGradient.Rotation = 45
	frameGradient.Parent = frame

	-- Stroke für Slider Frame
	local frameStroke = Instance.new("UIStroke")
	frameStroke.Color = Color3.fromRGB(0, 150, 200)
	frameStroke.Thickness = 1
	frameStroke.Transparency = 0.6
	frameStroke.Parent = frame

	local label = Instance.new("TextLabel")
	label.Size = UDim2.new(1, 0, 0, 25)
	label.Position = UDim2.new(0, 0, 0, 5)
	label.BackgroundTransparency = 1
	label.Text = text .. ": " .. defaultVal
	label.TextColor3 = Color3.fromRGB(255, 255, 255)
	label.TextScaled = true
	label.Font = Enum.Font.GothamBold
	label.Parent = frame

	local slider = Instance.new("Frame")
	slider.Size = UDim2.new(1, -20, 0, 20)
	slider.Position = UDim2.new(0, 10, 0, 30)
	slider.BackgroundColor3 = Color3.fromRGB(8, 8, 12)
	slider.BorderSizePixel = 0
	slider.Parent = frame

	local sliderCorner = Instance.new("UICorner")
	sliderCorner.CornerRadius = UDim.new(0, 10)
	sliderCorner.Parent = slider

	-- Stroke für Slider
	local sliderStroke = Instance.new("UIStroke")
	sliderStroke.Color = Color3.fromRGB(0, 200, 255)
	sliderStroke.Thickness = 1
	sliderStroke.Transparency = 0.7
	sliderStroke.Parent = slider

	local handle = Instance.new("TextButton")
	handle.Size = UDim2.new(0, 20, 1, 0)
	handle.Position = UDim2.new((defaultVal - minVal) / (maxVal - minVal), -10, 0, 0)
	handle.BackgroundColor3 = Color3.fromRGB(0, 200, 255)
	handle.Text = ""
	handle.BorderSizePixel = 0
	handle.Parent = slider

	local handleCorner = Instance.new("UICorner")
	handleCorner.CornerRadius = UDim.new(1, 0)
	handleCorner.Parent = handle

	-- Gradient für Handle
	local handleGradient = Instance.new("UIGradient")
	handleGradient.Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 220, 255)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 150, 200))
	}
	handleGradient.Rotation = 45
	handleGradient.Parent = handle

	local dragging = false
	local currentValue = defaultVal

	handle.MouseButton1Down:Connect(function()
		dragging = true
	end)

	UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = false
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
			local mouse = UserInputService:GetMouseLocation()
			local relativePos = (mouse.X - slider.AbsolutePosition.X) / slider.AbsoluteSize.X
			relativePos = math.clamp(relativePos, 0, 1)

			handle.Position = UDim2.new(relativePos, -10, 0, 0)
			currentValue = minVal + (maxVal - minVal) * relativePos
			label.Text = text .. ": " .. math.floor(currentValue)
		end
	end)

	return function() return math.floor(currentValue) end
end

-- FLY KATEGORIE
local flyFrame = categoryFrames["Fly"]

local flyButton = createButton(flyFrame, "Fly: OFF", 1)
local flySpeedSlider = createSlider(flyFrame, "Fly Speed", 10, 200, 50, 2)

flyButton.MouseButton1Click:Connect(function()
	-- Alte Fly-System Implementierung entfernt - wird jetzt durch FlySystem gehandhabt
	print("Fly button clicked - handled by new FlySystem")
end)

-- Professionelles Fly System - Moderne Implementierung
local FlySystem = {}
FlySystem.enabled = false
FlySystem.speed = 50
FlySystem.bodyVelocity = nil
FlySystem.bodyPosition = nil
FlySystem.connection = nil

-- Fly System Initialisierung
function FlySystem:Enable()
	if self.enabled then return end
	
	local character = LocalPlayer.Character
	if not character or not character:FindFirstChild("HumanoidRootPart") then return end
	
	local humanoidRootPart = character.HumanoidRootPart
	local humanoid = character:FindFirstChildOfClass("Humanoid")
	
	-- Deaktiviere normale Physik
	if humanoid then
		humanoid.PlatformStand = true
	end
	
	-- Erstelle BodyVelocity für präzise Bewegungskontrolle
	self.bodyVelocity = Instance.new("BodyVelocity")
	self.bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
	self.bodyVelocity.Velocity = Vector3.new(0, 0, 0)
	self.bodyVelocity.Parent = humanoidRootPart
	
	-- Erstelle BodyPosition für Stabilität
	self.bodyPosition = Instance.new("BodyPosition")
	self.bodyPosition.MaxForce = Vector3.new(0, math.huge, 0)
	self.bodyPosition.Position = humanoidRootPart.Position
	self.bodyPosition.D = 500  -- Damping für Stabilität
	self.bodyPosition.P = 3000 -- Power für responsive Bewegung
	self.bodyPosition.Parent = humanoidRootPart
	
	self.enabled = true
	
	-- Starte Update-Loop
	self:StartUpdateLoop()
end

function FlySystem:Disable()
	if not self.enabled then return end
	
	local character = LocalPlayer.Character
	if character then
		local humanoid = character:FindFirstChildOfClass("Humanoid")
		if humanoid then
			humanoid.PlatformStand = false
		end
	end
	
	-- Cleanup
	if self.bodyVelocity then
		self.bodyVelocity:Destroy()
		self.bodyVelocity = nil
	end
	
	if self.bodyPosition then
		self.bodyPosition:Destroy()
		self.bodyPosition = nil
	end
	
	if self.connection then
		self.connection:Disconnect()
		self.connection = nil
	end
	
	self.enabled = false
end

function FlySystem:StartUpdateLoop()
	if self.connection then
		self.connection:Disconnect()
	end
	
	self.connection = RunService.Heartbeat:Connect(function()
		self:Update()
	end)
end

function FlySystem:Update()
	if not self.enabled then return end
	
	local character = LocalPlayer.Character
	if not character or not character:FindFirstChild("HumanoidRootPart") then
		self:Disable()
		return
	end
	
	local humanoidRootPart = character.HumanoidRootPart
	local camera = Camera
	
	-- Character Rotation - Folgt Kamera exakt (Shift-Lock Style)
	local lookDirection = camera.CFrame.LookVector
	local upDirection = camera.CFrame.UpVector
	local rightDirection = camera.CFrame.RightVector
	
	-- Erstelle neue CFrame für Character basierend auf Kamera-Orientation
	local newCFrame = CFrame.fromMatrix(humanoidRootPart.Position, rightDirection, upDirection, -lookDirection)
	humanoidRootPart.CFrame = newCFrame
	
	-- Bewegungsberechnung - W fliegt in exakte Kamera-Richtung
	local moveVector = Vector3.new(0, 0, 0)
	
	-- Input Detection
	if UserInputService:IsKeyDown(Enum.KeyCode.W) then
		moveVector = moveVector + lookDirection -- Fliege exakt dahin wo Kamera hinzeigt (auch schräg)
	end
	if UserInputService:IsKeyDown(Enum.KeyCode.S) then
		moveVector = moveVector - lookDirection -- Rückwärts von Kamera-Richtung
	end
	if UserInputService:IsKeyDown(Enum.KeyCode.A) then
		moveVector = moveVector - rightDirection -- Links basierend auf Kamera
	end
	if UserInputService:IsKeyDown(Enum.KeyCode.D) then
		moveVector = moveVector + rightDirection -- Rechts basierend auf Kamera
	end
	if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
		moveVector = moveVector + Vector3.new(0, 1, 0) -- Direkt nach oben (world space)
	end
	if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
		moveVector = moveVector + Vector3.new(0, -1, 0) -- Direkt nach unten (world space)
	end
	
	-- Normalisiere Bewegungsvektor für konsistente Geschwindigkeit
	if moveVector.Magnitude > 0 then
		moveVector = moveVector.Unit
	end
	
	-- Setze Velocity für sofortige, präzise Bewegung
	self.bodyVelocity.Velocity = moveVector * self.speed
	
	-- Update BodyPosition für vertikale Stabilität
	if moveVector.Y == 0 then
		self.bodyPosition.Position = Vector3.new(humanoidRootPart.Position.X, humanoidRootPart.Position.Y, humanoidRootPart.Position.Z)
	else
		self.bodyPosition.Position = humanoidRootPart.Position + Vector3.new(0, moveVector.Y * self.speed * 0.016, 0)
	end
end

function FlySystem:SetSpeed(newSpeed)
	self.speed = math.clamp(newSpeed, 1, 1000)
end

-- Fly Button Integration
flyButton.MouseButton1Click:Connect(function()
	if FlySystem.enabled then
		FlySystem:Disable()
		flyButton.Text = "Fly: OFF"
		flyButton.BackgroundColor3 = Color3.fromRGB(60, 60, 65)
	else
		FlySystem:Enable()
		flyButton.Text = "Fly: ON"
		flyButton.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
	end
end)

-- Speed Update Integration
local lastFlySpeed = 50
RunService.Heartbeat:Connect(function()
	local currentSpeed = flySpeedSlider()
	if currentSpeed ~= lastFlySpeed then
		FlySystem:SetSpeed(currentSpeed)
		lastFlySpeed = currentSpeed
	end
end)

-- ME KATEGORIE
local meFrame = categoryFrames["Me"]

local giveItemsButton = createButton(meFrame, "Give All Items", 1)
local walkSpeedSlider = createSlider(meFrame, "Walk Speed", 16, 200, 16, 2)
local jumpHeightSlider = createSlider(meFrame, "Jump Height", 7.2, 50, 7.2, 3)
local noclipButton = createButton(meFrame, "Noclip: OFF", 4)

giveItemsButton.MouseButton1Click:Connect(function()
	local character = LocalPlayer.Character
	if character then
		local backpack = LocalPlayer.Backpack
		local starterPack = game:GetService("StarterPack")
		local replicatedStorage = game:GetService("ReplicatedStorage")

		local toolSources = {starterPack, replicatedStorage}

		for _, source in pairs(toolSources) do
			for _, item in pairs(source:GetDescendants()) do
				if item:IsA("Tool") and not backpack:FindFirstChild(item.Name) then
					local clonedTool = item:Clone()
					clonedTool.Parent = backpack
				end
			end
		end

		for _, item in pairs(Workspace:GetDescendants()) do
			if item:IsA("Tool") and not backpack:FindFirstChild(item.Name) then
				local clonedTool = item:Clone()
				clonedTool.Parent = backpack
			end
		end

		print("Give All Items executed - " .. #backpack:GetChildren() .. " Tools in Backpack")
	end
end)

-- FIXED Walk Speed Control - Einfach und funktional
RunService.Heartbeat:Connect(function()
	local character = LocalPlayer.Character
	if character and character:FindFirstChild("Humanoid") and character:FindFirstChild("HumanoidRootPart") then
		local humanoid = character.Humanoid
		local rootPart = character.HumanoidRootPart
		local newSpeed = walkSpeedSlider()

		-- Setze nur WalkSpeed
		humanoid.WalkSpeed = newSpeed

		-- Einfache Physics-Anpassung für weniger Sliding
		rootPart.CustomPhysicalProperties = PhysicalProperties.new(
			0.7,    -- Density
			1.0,    -- Friction
			0.0,    -- Elasticity
			1.0,    -- FrictionWeight
			1.0     -- ElasticityWeight
		)
	end
end)

-- FIXED Jump Height Control - Normales Roblox-Verhalten
RunService.Heartbeat:Connect(function()
	local character = LocalPlayer.Character
	if character and character:FindFirstChild("Humanoid") then
		local humanoid = character.Humanoid
		local newJumpHeight = jumpHeightSlider()

		-- Setze nur JumpHeight, sonst nichts
		if humanoid.JumpHeight ~= newJumpHeight then
			humanoid.JumpHeight = newJumpHeight
		end
	end
end)

-- Noclip
local noclipConnection
noclipButton.MouseButton1Click:Connect(function()
	isNoclipEnabled = not isNoclipEnabled
	noclipButton.Text = isNoclipEnabled and "Noclip: ON" or "Noclip: OFF"
	noclipButton.BackgroundColor3 = isNoclipEnabled and Color3.fromRGB(0, 150, 0) or Color3.fromRGB(60, 60, 65)

	if isNoclipEnabled then
		noclipConnection = RunService.Stepped:Connect(function()
			local character = LocalPlayer.Character
			if character then
				for _, part in pairs(character:GetChildren()) do
					if part:IsA("BasePart") and part.CanCollide then
						part.CanCollide = false
					end
				end
			end
		end)
	else
		if noclipConnection then
			noclipConnection:Disconnect()
			noclipConnection = nil
		end

		local character = LocalPlayer.Character
		if character then
			for _, part in pairs(character:GetChildren()) do
				if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
					part.CanCollide = true
				end
			end
		end
	end
end)

-- PLAYER KATEGORIE
local playerFrame = categoryFrames["Player"]

-- Player Selection Frame
local playerSelectionFrame = Instance.new("Frame")
playerSelectionFrame.Size = UDim2.new(1, -20, 0, 150)
playerSelectionFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
playerSelectionFrame.BorderSizePixel = 0
playerSelectionFrame.LayoutOrder = 1
playerSelectionFrame.Parent = playerFrame

local playerFrameCorner = Instance.new("UICorner")
playerFrameCorner.CornerRadius = UDim.new(0, 8)
playerFrameCorner.Parent = playerSelectionFrame

-- Gradient für Player Selection Frame
local playerFrameGradient = Instance.new("UIGradient")
playerFrameGradient.Color = ColorSequence.new{
	ColorSequenceKeypoint.new(0, Color3.fromRGB(20, 20, 30)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 10, 15))
}
playerFrameGradient.Rotation = 45
playerFrameGradient.Parent = playerSelectionFrame

-- Stroke für Player Selection Frame
local playerFrameStroke = Instance.new("UIStroke")
playerFrameStroke.Color = Color3.fromRGB(0, 150, 200)
playerFrameStroke.Thickness = 1
playerFrameStroke.Transparency = 0.6
playerFrameStroke.Parent = playerSelectionFrame

local playerSearchBox = Instance.new("TextBox")
playerSearchBox.Size = UDim2.new(1, -20, 0, 30)
playerSearchBox.Position = UDim2.new(0, 10, 0, 10)
playerSearchBox.BackgroundColor3 = Color3.fromRGB(8, 8, 12)
playerSearchBox.PlaceholderText = "Search players..."
playerSearchBox.Text = ""
playerSearchBox.TextColor3 = Color3.fromRGB(255, 255, 255)
playerSearchBox.TextScaled = true
playerSearchBox.Font = Enum.Font.GothamBold
playerSearchBox.BorderSizePixel = 0
playerSearchBox.Parent = playerSelectionFrame

local searchCorner = Instance.new("UICorner")
searchCorner.CornerRadius = UDim.new(0, 8)
searchCorner.Parent = playerSearchBox

-- Stroke für Search Box
local searchStroke = Instance.new("UIStroke")
searchStroke.Color = Color3.fromRGB(0, 200, 255)
searchStroke.Thickness = 1
searchStroke.Transparency = 0.7
searchStroke.Parent = playerSearchBox

local playerList = Instance.new("ScrollingFrame")
playerList.Size = UDim2.new(1, -20, 1, -50)
playerList.Position = UDim2.new(0, 10, 0, 40)
playerList.BackgroundColor3 = Color3.fromRGB(8, 8, 12)
playerList.BorderSizePixel = 0
playerList.ScrollBarThickness = 5
playerList.Parent = playerSelectionFrame

local playerListCorner = Instance.new("UICorner")
playerListCorner.CornerRadius = UDim.new(0, 8)
playerListCorner.Parent = playerList

-- Stroke für Player List
local playerListStroke = Instance.new("UIStroke")
playerListStroke.Color = Color3.fromRGB(0, 200, 255)
playerListStroke.Thickness = 1
playerListStroke.Transparency = 0.7
playerListStroke.Parent = playerList

local playerListLayout = Instance.new("UIListLayout")
playerListLayout.SortOrder = Enum.SortOrder.LayoutOrder
playerListLayout.Padding = UDim.new(0, 2)
playerListLayout.Parent = playerList

-- Player List Update
local function updatePlayerList()
	for _, child in pairs(playerList:GetChildren()) do
		if child:IsA("TextButton") then
			child:Destroy()
		end
	end

	local searchTerm = playerSearchBox.Text:lower()
	local matchedPlayers = {}

	for _, player in pairs(Players:GetPlayers()) do
		if player ~= LocalPlayer then
			local playerName = player.Name:lower()
			local displayName = (player.DisplayName and player.DisplayName ~= player.Name) and player.DisplayName:lower() or ""

			if searchTerm == "" or 
				playerName:sub(1, #searchTerm) == searchTerm or 
				playerName:find(searchTerm) or
				(displayName ~= "" and (displayName:sub(1, #searchTerm) == searchTerm or displayName:find(searchTerm))) then
				table.insert(matchedPlayers, player)
			end
		end
	end

	table.sort(matchedPlayers, function(a, b)
		local aName = a.Name:lower()
		local bName = b.Name:lower()
		local aStartsWith = aName:sub(1, #searchTerm) == searchTerm
		local bStartsWith = bName:sub(1, #searchTerm) == searchTerm

		if aStartsWith and not bStartsWith then
			return true
		elseif not aStartsWith and bStartsWith then
			return false
		else
			return aName < bName
		end
	end)

	for i, player in pairs(matchedPlayers) do
		local playerButton = Instance.new("TextButton")
		playerButton.Size = UDim2.new(1, -10, 0, 25)
		playerButton.BackgroundColor3 = (selectedPlayer == player.Name) and Color3.fromRGB(0, 180, 220) or Color3.fromRGB(15, 15, 20)

		local buttonText = player.Name
		if player.DisplayName and player.DisplayName ~= player.Name then
			buttonText = player.DisplayName .. " (" .. player.Name .. ")"
		end
		playerButton.Text = buttonText

		playerButton.TextColor3 = Color3.fromRGB(255, 255, 255)
		playerButton.TextScaled = true
		playerButton.Font = Enum.Font.GothamBold
		playerButton.BorderSizePixel = 0
		playerButton.LayoutOrder = i
		playerButton.Parent = playerList

		local playerBtnCorner = Instance.new("UICorner")
		playerBtnCorner.CornerRadius = UDim.new(0, 6)
		playerBtnCorner.Parent = playerButton

		-- Gradient für Player Buttons - NUR für ausgewählte Spieler
		if selectedPlayer == player.Name then
			local playerBtnGradient = Instance.new("UIGradient")
			playerBtnGradient.Color = ColorSequence.new{
				ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 200, 240)),
				ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 140, 180))
			}
			playerBtnGradient.Rotation = 45
			playerBtnGradient.Parent = playerButton
		end

		playerButton.MouseButton1Click:Connect(function()
			selectedPlayer = player.Name
			updatePlayerList()
		end)
	end

	playerList.CanvasSize = UDim2.new(0, 0, 0, #matchedPlayers * 27)
end

playerSearchBox:GetPropertyChangedSignal("Text"):Connect(updatePlayerList)
Players.PlayerAdded:Connect(updatePlayerList)
Players.PlayerRemoving:Connect(updatePlayerList)
updatePlayerList()

local viewButton = createButton(playerFrame, "View: OFF", 2)
local gotoButton = createButton(playerFrame, "Goto Player", 3)

-- View Player Camera
local originalCameraCFrame = nil
local originalCameraSubject = nil

viewButton.MouseButton1Click:Connect(function()
	if selectedPlayer ~= "" then
		local targetPlayer = Players:FindFirstChild(selectedPlayer)
		if targetPlayer then
			isViewingPlayer = not isViewingPlayer
			viewButton.Text = isViewingPlayer and "View: ON" or "View: OFF"
			viewButton.BackgroundColor3 = isViewingPlayer and Color3.fromRGB(0, 150, 0) or Color3.fromRGB(60, 60, 65)

			if isViewingPlayer then
				viewingPlayerName = selectedPlayer
				originalCameraCFrame = Camera.CFrame
				originalCameraSubject = Camera.CameraSubject

				if targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid") then
					Camera.CameraSubject = targetPlayer.Character.Humanoid
					Camera.CameraType = Enum.CameraType.Custom
				end
			else
				viewingPlayerName = ""
				if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
					Camera.CameraSubject = LocalPlayer.Character.Humanoid
					Camera.CameraType = Enum.CameraType.Custom
				end
			end
		end
	end
end)

gotoButton.MouseButton1Click:Connect(function()
	if selectedPlayer ~= "" then
		local targetPlayer = Players:FindFirstChild(selectedPlayer)
		local character = LocalPlayer.Character
		if targetPlayer and targetPlayer.Character and character and character:FindFirstChild("HumanoidRootPart") then
			local targetCharacter = targetPlayer.Character
			if targetCharacter:FindFirstChild("HumanoidRootPart") then
				character.HumanoidRootPart.CFrame = targetCharacter.HumanoidRootPart.CFrame
			end
		end
	end
end)

-- ESP KATEGORIE
local espFrame = categoryFrames["ESP"]

local espHighlightButton = createButton(espFrame, "ESP Highlight: OFF", 1)

-- Color Selection für ESP
local espColorFrame = Instance.new("Frame")
espColorFrame.Size = UDim2.new(1, -20, 0, 80)
espColorFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
espColorFrame.BorderSizePixel = 0
espColorFrame.LayoutOrder = 2
espColorFrame.Parent = espFrame

local espColorCorner = Instance.new("UICorner")
espColorCorner.CornerRadius = UDim.new(0, 8)
espColorCorner.Parent = espColorFrame

-- Gradient für ESP Color Frame
local espColorGradient = Instance.new("UIGradient")
espColorGradient.Color = ColorSequence.new{
	ColorSequenceKeypoint.new(0, Color3.fromRGB(20, 20, 30)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 10, 15))
}
espColorGradient.Rotation = 45
espColorGradient.Parent = espColorFrame

-- Stroke für ESP Color Frame
local espColorStroke = Instance.new("UIStroke")
espColorStroke.Color = Color3.fromRGB(0, 150, 200)
espColorStroke.Thickness = 1
espColorStroke.Transparency = 0.6
espColorStroke.Parent = espColorFrame

local espColorLabel = Instance.new("TextLabel")
espColorLabel.Size = UDim2.new(1, 0, 0, 25)
espColorLabel.Position = UDim2.new(0, 0, 0, 5)
espColorLabel.BackgroundTransparency = 1
espColorLabel.Text = "ESP Color"
espColorLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
espColorLabel.TextScaled = true
espColorLabel.Font = Enum.Font.GothamBold
espColorLabel.Parent = espColorFrame

local espColors = {
	{Color3.fromRGB(255, 0, 0), "Red"},
	{Color3.fromRGB(0, 255, 0), "Green"},
	{Color3.fromRGB(0, 0, 255), "Blue"},
	{Color3.fromRGB(255, 255, 0), "Yellow"},
	{Color3.fromRGB(255, 0, 255), "Magenta"},
	{Color3.fromRGB(0, 255, 255), "Cyan"},
	{Color3.fromRGB(255, 255, 255), "White"},
	{Color3.fromRGB(0, 0, 0), "Black"}
}

for i, colorData in pairs(espColors) do
	local colorButton = Instance.new("TextButton")
	colorButton.Size = UDim2.new(0, 50, 0, 40)
	colorButton.Position = UDim2.new(0, 10 + (i-1) * 55, 0, 30)
	colorButton.BackgroundColor3 = colorData[1]
	colorButton.Text = ""
	colorButton.BorderSizePixel = 0
	colorButton.Parent = espColorFrame

	local colorCorner = Instance.new("UICorner")
	colorCorner.CornerRadius = UDim.new(0, 4)
	colorCorner.Parent = colorButton

	colorButton.MouseButton1Click:Connect(function()
		espColor = colorData[1]
		for player, highlight in pairs(espHighlights) do
			if highlight then
				highlight.FillColor = espColor
				highlight.OutlineColor = espColor
			end
		end
	end)
end

local espTransparencySlider = createSlider(espFrame, "ESP Transparency", 0, 100, 50, 3)

local nametagsButton = createButton(espFrame, "Nametags: OFF", 4)

-- Color Selection für Nametags
local nametagColorFrame = Instance.new("Frame")
nametagColorFrame.Size = UDim2.new(1, -20, 0, 80)
nametagColorFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
nametagColorFrame.BorderSizePixel = 0
nametagColorFrame.LayoutOrder = 5
nametagColorFrame.Parent = espFrame

local nametagColorCorner = Instance.new("UICorner")
nametagColorCorner.CornerRadius = UDim.new(0, 8)
nametagColorCorner.Parent = nametagColorFrame

-- Gradient für Nametag Color Frame
local nametagColorGradient = Instance.new("UIGradient")
nametagColorGradient.Color = ColorSequence.new{
	ColorSequenceKeypoint.new(0, Color3.fromRGB(20, 20, 30)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 10, 15))
}
nametagColorGradient.Rotation = 45
nametagColorGradient.Parent = nametagColorFrame

-- Stroke für Nametag Color Frame
local nametagColorStroke = Instance.new("UIStroke")
nametagColorStroke.Color = Color3.fromRGB(0, 150, 200)
nametagColorStroke.Thickness = 1
nametagColorStroke.Transparency = 0.6
nametagColorStroke.Parent = nametagColorFrame

local nametagColorLabel = Instance.new("TextLabel")
nametagColorLabel.Size = UDim2.new(1, 0, 0, 25)
nametagColorLabel.Position = UDim2.new(0, 0, 0, 5)
nametagColorLabel.BackgroundTransparency = 1
nametagColorLabel.Text = "Nametag Color"
nametagColorLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
nametagColorLabel.TextScaled = true
nametagColorLabel.Font = Enum.Font.GothamBold
nametagColorLabel.Parent = nametagColorFrame

for i, colorData in pairs(espColors) do
	local colorButton = Instance.new("TextButton")
	colorButton.Size = UDim2.new(0, 50, 0, 40)
	colorButton.Position = UDim2.new(0, 10 + (i-1) * 55, 0, 30)
	colorButton.BackgroundColor3 = colorData[1]
	colorButton.Text = ""
	colorButton.BorderSizePixel = 0
	colorButton.Parent = nametagColorFrame

	local colorCorner = Instance.new("UICorner")
	colorCorner.CornerRadius = UDim.new(0, 4)
	colorCorner.Parent = colorButton

	colorButton.MouseButton1Click:Connect(function()
		nametagColor = colorData[1]
		for player, nametag in pairs(nametags) do
			if nametag and nametag:FindFirstChild("TextLabel") then
				nametag.TextLabel.TextColor3 = nametagColor
			end
		end
	end)
end

local nametagSizeSlider = createSlider(espFrame, "Nametag Size", 8, 30, 14, 6)

-- ESP Funktionen - KORRIGIERT
local function createESPHighlight(character)
	if not character or not character.Parent then 
		return nil 
	end

	for _, child in pairs(character:GetChildren()) do
		if child.Name == "VyrxisESP" then
			child:Destroy()
		end
	end

	local highlight = Instance.new("Highlight")
	highlight.Name = "VyrxisESP"
	highlight.FillColor = espColor
	highlight.OutlineColor = espColor
	highlight.FillTransparency = espTransparency
	highlight.OutlineTransparency = 0
	highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
	highlight.Parent = character

	return highlight
end

-- KORRIGIERTE Healthbar Funktion - FEHLER BEHOBEN
local function createHealthbar(character)
	if not character or not character.Parent then 
		return nil 
	end

	local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
	local humanoid = character:FindFirstChild("Humanoid")
	if not humanoidRootPart or not humanoid then 
		return nil 
	end

	for _, child in pairs(humanoidRootPart:GetChildren()) do
		if child:IsA("BillboardGui") and child.Name == "VyrxisHealthbar" then
			child:Destroy()
		end
	end

	-- Berechne Character-Höhe für relative Größe
	local characterHeight = 5 -- Standard Roblox Character
	if character:FindFirstChild("Head") then
		local head = character.Head
		characterHeight = math.abs(head.Position.Y - humanoidRootPart.Position.Y) + head.Size.Y/2 + humanoidRootPart.Size.Y/2
	end

	local billboardGui = Instance.new("BillboardGui")
	billboardGui.Name = "VyrxisHealthbar"
	-- Größe relativ zur Character-Höhe - BLEIBT IMMER PROPORTIONAL
	billboardGui.Size = UDim2.new(0, 0, characterHeight * 0.8, 0)
	billboardGui.StudsOffset = Vector3.new(2.5, 0, 0)
	billboardGui.Parent = humanoidRootPart
	billboardGui.AlwaysOnTop = true
	billboardGui.LightInfluence = 0

	local background = Instance.new("Frame")
	background.Size = UDim2.new(1, 0, 1, 0)
	background.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	background.BorderSizePixel = 1
	background.BorderColor3 = Color3.fromRGB(255, 255, 255)
	background.Parent = billboardGui

	local backgroundCorner = Instance.new("UICorner")
	backgroundCorner.CornerRadius = UDim.new(0, 2)
	backgroundCorner.Parent = background

	local currentHealthPercent = math.max(humanoid.Health / humanoid.MaxHealth, 0.05)
	local healthBar = Instance.new("Frame")
	healthBar.Size = UDim2.new(1, -2, currentHealthPercent, -2)
	healthBar.Position = UDim2.new(0, 1, 1, -1)
	healthBar.AnchorPoint = Vector2.new(0, 1)
	healthBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
	healthBar.BorderSizePixel = 0
	healthBar.Parent = background

	local healthBarCorner = Instance.new("UICorner")
	healthBarCorner.CornerRadius = UDim.new(0, 1)
	healthBarCorner.Parent = healthBar

	local healthConnection = humanoid.HealthChanged:Connect(function()
		if healthBar and healthBar.Parent then
			local healthPercent = math.max(humanoid.Health / humanoid.MaxHealth, 0.05)
			healthBar.Size = UDim2.new(1, -2, healthPercent, -2)

			if healthPercent > 0.6 then
				healthBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
			elseif healthPercent > 0.3 then
				healthBar.BackgroundColor3 = Color3.fromRGB(255, 255, 0)
			else
				healthBar.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
			end
		end
	end)

	local ancestryConnection = character.AncestryChanged:Connect(function()
		if not character.Parent then
			if healthConnection then 
				healthConnection:Disconnect()
			end
			if ancestryConnection then 
				ancestryConnection:Disconnect() 
			end
		end
	end)

	return billboardGui
end

local function createNametag(character, playerName)
	if not character or not character.Parent then return nil end

	local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
	if not humanoidRootPart then return nil end

	for _, child in pairs(humanoidRootPart:GetChildren()) do
		if child.Name == "VyrxisNametag" then
			child:Destroy()
		end
	end

	local billboardGui = Instance.new("BillboardGui")
	billboardGui.Name = "VyrxisNametag"
	billboardGui.Size = UDim2.new(0, 200, 0, 50)
	billboardGui.StudsOffset = Vector3.new(0, -4, 0)
	billboardGui.Parent = humanoidRootPart
	billboardGui.AlwaysOnTop = true
	billboardGui.LightInfluence = 0

	local textLabel = Instance.new("TextLabel")
	textLabel.Size = UDim2.new(1, 0, 1, 0)
	textLabel.BackgroundTransparency = 1
	textLabel.Text = playerName
	textLabel.TextColor3 = nametagColor
	textLabel.TextSize = nametagSize
	textLabel.Font = Enum.Font.GothamBold
	textLabel.TextStrokeTransparency = 0
	textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
	textLabel.Parent = billboardGui

	return billboardGui
end

-- ESP für alle Spieler - KORRIGIERT
local function enableESPForAllPlayers()
	print("ESP für alle Spieler aktivieren...")

	for player, highlight in pairs(espHighlights) do
		if highlight and highlight.Parent then
			highlight:Destroy()
		end
	end
	for player, healthbar in pairs(healthbars) do
		if healthbar and healthbar.Parent then
			healthbar:Destroy()
		end
	end
	espHighlights = {}
	healthbars = {}

	for _, player in pairs(Players:GetPlayers()) do
		if player ~= LocalPlayer and player.Character and player.Character.Parent then
			local highlight = createESPHighlight(player.Character)
			if highlight then
				espHighlights[player] = highlight
			end

			local healthbar = createHealthbar(player.Character)
			if healthbar then
				healthbars[player] = healthbar
			end
		end
	end
end

local function disableESPForAllPlayers()
	for player, highlight in pairs(espHighlights) do
		if highlight and highlight.Parent then
			highlight:Destroy()
		end
	end

	for player, healthbar in pairs(healthbars) do
		if healthbar and healthbar.Parent then
			healthbar:Destroy()
		end
	end

	espHighlights = {}
	healthbars = {}
end

-- ESP Toggle Button
espHighlightButton.MouseButton1Click:Connect(function()
	isESPEnabled = not isESPEnabled
	espHighlightButton.Text = isESPEnabled and "ESP Highlight: ON" or "ESP Highlight: OFF"
	espHighlightButton.BackgroundColor3 = isESPEnabled and Color3.fromRGB(0, 150, 0) or Color3.fromRGB(60, 60, 65)

	if isESPEnabled then
		enableESPForAllPlayers()
	else
		disableESPForAllPlayers()
	end
end)

-- Player Events
Players.PlayerAdded:Connect(function(player)
	if player == LocalPlayer then return end

	updatePlayerList()

	player.CharacterAdded:Connect(function(character)
		wait(0.5)

		if isESPEnabled then
			local highlight = createESPHighlight(character)
			if highlight then
				espHighlights[player] = highlight
			end

			local healthbar = createHealthbar(character)
			if healthbar then
				healthbars[player] = healthbar
			end
		end

		if nametagsEnabled then
			local nametag = createNametag(character, player.Name)
			if nametag then 
				nametags[player] = nametag 
			end
		end
	end)
end)

Players.PlayerRemoving:Connect(function(player)
	if espHighlights[player] then
		espHighlights[player]:Destroy()
		espHighlights[player] = nil
	end
	if healthbars[player] then
		healthbars[player]:Destroy()
		healthbars[player] = nil
	end
	if nametags[player] then
		nametags[player]:Destroy()
		nametags[player] = nil
	end

	updatePlayerList()
end)

-- Nametags Toggle
nametagsButton.MouseButton1Click:Connect(function()
	nametagsEnabled = not nametagsEnabled
	nametagsButton.Text = nametagsEnabled and "Nametags: ON" or "Nametags: OFF"
	nametagsButton.BackgroundColor3 = nametagsEnabled and Color3.fromRGB(0, 150, 0) or Color3.fromRGB(60, 60, 65)

	if nametagsEnabled then
		for _, player in pairs(Players:GetPlayers()) do
			if player ~= LocalPlayer and player.Character then
				local nametag = createNametag(player.Character, player.Name)
				nametags[player] = nametag
			end
		end
	else
		for player, nametag in pairs(nametags) do
			if nametag then
				nametag:Destroy()
			end
		end
		nametags = {}
	end
end)

-- ESP Transparency Update
RunService.Heartbeat:Connect(function()
	local newTransparency = espTransparencySlider() / 100
	if newTransparency ~= espTransparency then
		espTransparency = newTransparency
		for player, highlight in pairs(espHighlights) do
			if highlight then
				highlight.FillTransparency = espTransparency
			end
		end
	end

	local newNametagSize = nametagSizeSlider()
	if newNametagSize ~= nametagSize then
		nametagSize = newNametagSize
		for player, nametag in pairs(nametags) do
			if nametag and nametag:FindFirstChild("TextLabel") then
				nametag.TextLabel.TextSize = nametagSize
			end
		end
	end
end)

-- GUI Controls
MinimizeButton.MouseButton1Click:Connect(function()
	MainFrame.Visible = not MainFrame.Visible
end)

SettingsButton.MouseButton1Click:Connect(function()
	SettingsFrame.Visible = true
end)

CloseSettings.MouseButton1Click:Connect(function()
	SettingsFrame.Visible = false
end)

-- Keybind Change
local changingKey = false
ChangeKeyButton.MouseButton1Click:Connect(function()
	if not changingKey then
		changingKey = true
		ChangeKeyButton.Text = "Press Key..."

		local connection
		connection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
			if not gameProcessed and input.UserInputType == Enum.UserInputType.Keyboard then
				toggleKey = input.KeyCode
				KeybindLabel.Text = "Toggle Key: " .. toggleKey.Name
				ChangeKeyButton.Text = "Change Key"
				changingKey = false
				connection:Disconnect()
			end
		end)
	end
end)

-- Toggle Menu with Key
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if not gameProcessed and input.KeyCode == toggleKey then
		MainRahmen.Visible = not MainRahmen.Visible
		if MainRahmen.Visible then
			MainFrame.Visible = true
		end
	end
end)

-- Load Screen Animation
local function hideLoadScreen()
	local loadBarTween = TweenService:Create(LoadBar, TweenInfo.new(4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(1, 0, 1, 0)})
	loadBarTween:Play()

	spawn(function()
		wait(1)
		LoadSubText.Text = "Loading components..."
		wait(1)
		LoadSubText.Text = "Initializing features..."
		wait(1)
		LoadSubText.Text = "Almost ready..."
		wait(1)
		LoadSubText.Text = "Ready!"
	end)

	wait(5)

	local fadeOutTween = TweenService:Create(LoadScreen, TweenInfo.new(0.8, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {BackgroundTransparency = 1})
	local textFadeTween = TweenService:Create(LoadText, TweenInfo.new(0.8, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {TextTransparency = 1})
	local subTextFadeTween = TweenService:Create(LoadSubText, TweenInfo.new(0.8, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {TextTransparency = 1})
	local strokeFadeTween = TweenService:Create(LoadStroke, TweenInfo.new(0.8, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {Transparency = 1})
	local barBgFadeTween = TweenService:Create(LoadBarBackground, TweenInfo.new(0.8, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {BackgroundTransparency = 1})
	local barFadeTween = TweenService:Create(LoadBar, TweenInfo.new(0.8, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {BackgroundTransparency = 1})

	fadeOutTween:Play()
	textFadeTween:Play()
	subTextFadeTween:Play()
	strokeFadeTween:Play()
	barBgFadeTween:Play()
	barFadeTween:Play()

	for _, bubble in pairs(bubbles) do
		local bubbleFadeTween = TweenService:Create(bubble, TweenInfo.new(0.8, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {BackgroundTransparency = 1})
		bubbleFadeTween:Play()
	end

	fadeOutTween.Completed:Connect(function()
		LoadScreen:Destroy()
		for _, bubble in pairs(bubbles) do
			if bubble and bubble.Parent then
				bubble:Destroy()
			end
		end

		MainRahmen.Visible = true
		MainFrame.Visible = true

		local showTween = TweenService:Create(MainRahmen, TweenInfo.new(0.6, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {Position = UDim2.new(0.5, -350, 0.3, -15)})
		showTween:Play()
	end)
end

hideLoadScreen()

print("Vyrxis Menu loaded successfully - CHARACTER ROTATION FIXED!")
print("✓ Character rotation ONLY when flying is enabled")
print("✓ No rotation when standing/walking normally")
print("✓ Smooth 3D rotation when flying with camera direction")
